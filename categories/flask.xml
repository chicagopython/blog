<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Python Project Night Challenges (Posts about flask)</title><link>https://chicagopython.github.io/</link><description></description><atom:link href="https://chicagopython.github.io/categories/flask.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents Â© 2019 &lt;a href="mailto:chicago-sig-organizers@python.org"&gt;Chicago Python User Group&lt;/a&gt; 
&lt;a rel="license" href="https://www.gnu.org/licenses/gpl-3.0.en.html"&gt;
&lt;img alt="Gnu Public License version 3.0"
style="border-width:0;"
src="https://www.gnu.org/graphics/gplv3-with-text-84x42.png"&gt;&lt;/a&gt;</copyright><lastBuildDate>Mon, 18 Mar 2019 03:07:22 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Flask App for Exchange Rates</title><link>https://chicagopython.github.io/posts/flask-app-for-exchange-rates/</link><dc:creator>Chicago Python User Group</dc:creator><description>&lt;div&gt;&lt;h2&gt;Flask App for Exchange Rates&lt;/h2&gt;
&lt;h3&gt;Objective&lt;/h3&gt;
&lt;p&gt;All developers in the modern day need to understand web technologies at some level. Whether you're interacting with a Jupyter notebook or querying a web api, understanding how a CLIENT requests information from a SERVER and to see how the SERVER produces its response is incredibly valuable.&lt;/p&gt;
&lt;h3&gt;Overview&lt;/h3&gt;
&lt;p&gt;We will make a web app that serves as both a CLIENT to an external api (exchangeratesapi.io). This app will show conversion rates for currencies, and then add some more complex data.&lt;/p&gt;
&lt;h3&gt;Prerequisites&lt;/h3&gt;
&lt;p&gt;For this project we recommend all use Atom (or Sublime) to write code and a shell/terminal to execute the program. All instructions will be given assuming a Python 3.6 install.&lt;/p&gt;
&lt;p&gt;You should probably have the &lt;a href="http://flask.pocoo.org/docs/1.0/quickstart/"&gt;Flask documentation&lt;/a&gt; up as we go through the exercise.&lt;/p&gt;
&lt;h3&gt;Initial Setup&lt;/h3&gt;
&lt;p&gt;Create a folder for this project: &lt;code&gt;mkdir mentorship_web &amp;amp;&amp;amp; cd mentorship_web&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;If you are using Linux or OS X, run the following to create a new virtualenv&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;python3 -m venv venv
source venv/bin/activate
&lt;/pre&gt;


&lt;p&gt;On Windows, run the following&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;python3 -m venv venv
venv\Scripts\activate
&lt;/pre&gt;


&lt;p&gt;Install Flask, our main web-app: &lt;code&gt;pip install flask&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;Create a new file called &lt;code&gt;app.py&lt;/code&gt;&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello_world&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s2"&gt;"Hello World!"&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Run your flask app: &lt;code&gt;python app.py&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;It should display a link, paste that in your browser to see the running code.&lt;/p&gt;
&lt;h3&gt;Display some Exchange Rates&lt;/h3&gt;
&lt;p&gt;Define a dictionary with three entries like the following inside your hello route:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;exchange_rates = {
  'EUR': '...',
  'GBP': '...',
    ' 
&lt;/pre&gt;


&lt;p&gt;Pick any currencies you want! We'll display the values as they convert to USD (because we are in Chicago). Better specify that now for clarity. Add this line just bellow your &lt;code&gt;app =&lt;/code&gt; definition, we'll use it later:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;BASE_CURRENCY = 'USD'
&lt;/pre&gt;


&lt;p&gt;Of course, fill in the &lt;code&gt;...&lt;/code&gt; with real currency values, otherwise our site is pointless! Use a tool like &lt;a href="https://www.x-rates.com/table/?from=USD&amp;amp;amount=1"&gt;X-Rates&lt;/a&gt; to look up the currency conversions.&lt;/p&gt;
&lt;p&gt;Now update the return string in the hello route to include the information about these currencies.&lt;/p&gt;
&lt;h3&gt;Make it Beautiful&lt;/h3&gt;
&lt;p&gt;Returning strings is fine...I suppose. But I want big, beautiful HTML! Research Flask's &lt;a href="http://flask.pocoo.org/docs/1.0/quickstart/#rendering-templates"&gt;&lt;code&gt;render_template&lt;/code&gt; function&lt;/a&gt; and add some beautiful looking HTML to format your. Hint: You'll want to create a &lt;code&gt;templates/&lt;/code&gt; folder in the same directory as your &lt;code&gt;app.py&lt;/code&gt;, and if you aren't using a kind of loop in your template...it's going to get real tough for you later! &lt;/p&gt;
&lt;p&gt;Test your work by adding another currency to your &lt;code&gt;exchange_rates&lt;/code&gt; dictionary and watch how your page changes.&lt;/p&gt;
&lt;h3&gt;Refactor&lt;/h3&gt;
&lt;p&gt;Define a function right under your &lt;code&gt;BASE_CURRENCY&lt;/code&gt; definition that looks like the following:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;def exchange_rates():
  return # Move your dictionary here
&lt;/pre&gt;


&lt;p&gt;Then replace any references in your code to use the function instead of defining the dictionary in your route!&lt;/p&gt;
&lt;h3&gt;Automatic Data&lt;/h3&gt;
&lt;p&gt;Now comes the fun part. What if we could get the exchange rates on a live feed from a third party service? We can with &lt;a href="http://exchangeratesapi.io"&gt;ExchangeRatesAPI.io&lt;/a&gt;. This is a free api that runs over simple HTTPS! We'll have something like the following: &lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;def exchange_rates():
  response = requests.get('https://api.exchangeratesapi.io/latest')
  return # What are we going to put here now? 
&lt;/pre&gt;


&lt;p&gt;Read up on &lt;a href="http://docs.python-requests.org/en/master/user/quickstart/#json-response-content"&gt;Requests' built in JSON Parsing&lt;/a&gt; and try to extract the data from the API response. Your end goal is to return all of the 
currencies from this function. &lt;/p&gt;
&lt;p&gt;Hint: This problem is a great time to use the Python debugger (&lt;a href="https://docs.python.org/3/library/pdb.html"&gt;&lt;code&gt;pdb&lt;/code&gt;&lt;/a&gt;)! Insert the following line before the &lt;code&gt;return&lt;/code&gt; command and interact with your server on the command line. So cool! &lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pdb&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;pdb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_trace&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;


&lt;h4&gt;Correct Currency&lt;/h4&gt;
&lt;p&gt;Are we sure the previous step is getting us the currency in our &lt;code&gt;BASE_CURRENCY&lt;/code&gt; variable? Investigate the &lt;a href="http://exchangeratesapi.io"&gt;api docs&lt;/a&gt; to find out how you can change the base currency to the one we want.&lt;/p&gt;
&lt;h2&gt;You DID it! Now what?&lt;/h2&gt;
&lt;p&gt;From here on out we are trusting that you can use the documentation, look for resources on your own, and come up with clever solutions to these problems. Try each one, and if you get stuck, move on to a different one! Ask for help if you want more clarification or can't think of a way to do it. &lt;/p&gt;
&lt;h3&gt;Information Overload&lt;/h3&gt;
&lt;p&gt;Could we provide a form that would let people get only the currency they want? I don't need every currency. We'd probably use some kind of html form. And I bet Flask has some documentation on receiving requests from the client.&lt;/p&gt;
&lt;p&gt;e.g. Instead of &lt;code&gt;JPY-&amp;gt;*&lt;/code&gt; I only want to see &lt;code&gt;USD-&amp;gt;GBP&lt;/code&gt; or I only want to see &lt;code&gt;USD-&amp;gt;JPY&lt;/code&gt;.&lt;/p&gt;
&lt;h3&gt;Order by Value&lt;/h3&gt;
&lt;p&gt;How could we order the currencies by the value of the currency?&lt;/p&gt;
&lt;p&gt;e.g. If something is &lt;code&gt;.00001 USD&lt;/code&gt;, lets list that last, and if something is &lt;code&gt;987654321 USD&lt;/code&gt; lets list that first.&lt;/p&gt;
&lt;h3&gt;User-Specified Base Currency&lt;/h3&gt;
&lt;p&gt;Some users of our product have complained, rightfully, that they can only get the currency listed in &lt;code&gt;USD&lt;/code&gt;. We should let them specify what currency they want.&lt;/p&gt;
&lt;p&gt;e.g. Instead of &lt;code&gt;USD-&amp;gt;*&lt;/code&gt; I want to see &lt;code&gt;CNY-&amp;gt;*&lt;/code&gt;&lt;/p&gt;
&lt;h4&gt;Bonus: Links to each user-specified currency from the currency list&lt;/h4&gt;
&lt;p&gt;Wouldn't it be great if each currency as it appeared would link to its own currency conversion?&lt;/p&gt;
&lt;p&gt;e.g. From the home page I could click on &lt;code&gt;JPY&lt;/code&gt; to find out all of the conversions from &lt;code&gt;JPY-&amp;gt;*&lt;/code&gt;. &lt;/p&gt;
&lt;h3&gt;Caching&lt;/h3&gt;
&lt;p&gt;Do we really need to use an API request every time we do a call? How could we store the results of each run to avoid API abuse.&lt;/p&gt;&lt;/div&gt;</description><category>flask</category><guid>https://chicagopython.github.io/posts/flask-app-for-exchange-rates/</guid><pubDate>Thu, 21 Mar 2019 23:00:00 GMT</pubDate></item><item><title>Flask Collage for Project Night Challengers</title><link>https://chicagopython.github.io/posts/flask-collage-for-project-night-challengers/</link><dc:creator>Chicago Python User Group</dc:creator><description>&lt;div&gt;&lt;h2&gt;Flask Collage for Project Night Challengers&lt;/h2&gt;
&lt;p&gt;Build a small web app using Flask which accepts the meetup.com event id for tonight
as a parameter and would fetch the profile pictures of all the attendees to create a
collage. &lt;a href="https://twitter.com/Tathagata/status/746302962830540801"&gt;Here&lt;/a&gt; is an example
of such a collage.&lt;/p&gt;
&lt;p&gt;You'll need:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;pip install flask&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pip install Flask-WTF&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;&lt;code&gt;pip install meetup-api&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;How to create a basic Flask app:
Follow the instructions &lt;a href="http://flask.pocoo.org/docs/0.11/quickstart/"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;flask&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;
&lt;span class="n"&gt;app&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;Flask&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="vm"&gt;__name__&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="nd"&gt;@app.route&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'/'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;hello_world&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;'Hello World!'&lt;/span&gt;

&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;'__main__'&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;debug&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="bp"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;&lt;code&gt;python testflask.py&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;To get you started, the following piece of code will help you fetch the thumbnail
images from meetup.com.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;meetup.api&lt;/span&gt;
&lt;span class="n"&gt;client&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;meetup&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;api&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;Client&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'your_key'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="n"&gt;rsvps&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetRsvps&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;event_id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'235484841'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;urlname&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;'_ChiPy_'&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="n"&gt;member_id&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="s1"&gt;','&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;join&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="nb"&gt;str&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'member'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'member_id'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;i&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;rsvps&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;span class="n"&gt;members&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;client&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;GetMembers&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;member_id&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;member_id&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

&lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;member&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;members&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;results&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="s1"&gt;'{0},{1},{2}'&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;member&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'name'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;member&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'id'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;member&lt;/span&gt;&lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="s1"&gt;'photo'&lt;/span&gt;&lt;span class="p"&gt;][&lt;/span&gt;&lt;span class="s1"&gt;'thumb_link'&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
    &lt;span class="k"&gt;except&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;pass&lt;/span&gt; &lt;span class="c1"&gt;# ignore those who do not have a complete profile&lt;/span&gt;
&lt;/pre&gt;


&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Can you include the name along with the images in your collage?&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add a search box to your collage, where you can search some one by name. 
On a successful search, it should display that person and their name. On failure, it should give a proper error message.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Add the following list of questions to your search result page that collects feedback on what an attendee would like to do &lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Choices:
- Help others with Python 101 questions
- Help others with Python Data Science questions
- Help others with Python Web Dev questions
- Python 101 course (Beginner)
- Attend Coding Workshop (Intermediate)
- Attend RasberryPi Lab (Intermediate)
- Work on my own project, get help from others &lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;Deploy your app to a public hosting, share the link with the world!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Currently we are accepting RSVPs on both ChiPy's site and Chicago Pythonista's
meetup page. Can you fetch the thumbnails from both the pages, eliminate the
duplicates, and merge them to generate the collage?&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;&lt;/div&gt;</description><category>flask</category><category>web-dev</category><guid>https://chicagopython.github.io/posts/flask-collage-for-project-night-challengers/</guid><pubDate>Sun, 17 Mar 2019 05:20:18 GMT</pubDate></item><item><title>Flask App for Project Night Challengers</title><link>https://chicagopython.github.io/posts/flask-app-to-group-project-night-challengers/</link><dc:creator>Chicago Python User Group</dc:creator><description>&lt;div&gt;&lt;h2&gt;Flask App for Project Night Challengers&lt;/h2&gt;
&lt;p&gt;In this project we will be building a fully functional web app using Flask.&lt;/p&gt;
&lt;p&gt;In the &lt;a href="https://github.com/chicagopython/CodingWorkshops/tree/master/problems/py101/python_team_project"&gt;team project command line application&lt;/a&gt;, we built an awesome command line
application for creating teams out of people who have RSVP-ed for a Python Project
Night. However, it is much easier to give a link of your app to someone
than asking them to use a command line. So, we will create a web app, that allows
forming teams from the list of RSVP-s from meetup.com. We
will ask for the number of lines of code that a person has written in
Python or an equivalent language and use it for putting them in a team. The number of lines is just a rough estimate. As a reference, the linux kernel is over 23 million lines of code!&lt;/p&gt;
&lt;p&gt;In short, imagine this as a tool that one of the
organizers uses to checkin attendees as they start coming in on the day of
Project Night.&lt;/p&gt;
&lt;p&gt;Short url for this page: &lt;strong&gt;https://git.io/vdQj6&lt;/strong&gt;&lt;/p&gt;
&lt;h4&gt;Is this project for you&lt;/h4&gt;
&lt;p&gt;Before you progress further, let's check if we are ready to solve this. You should&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Have a personal computer with working wifi and power cord&lt;/li&gt;
&lt;li&gt;Have Python 3 installed on your computer. Yep, Python 3 only.&lt;/li&gt;
&lt;li&gt;Have &lt;a href="https://atom.io/"&gt;Atom&lt;/a&gt; or &lt;a href="https://www.sublimetext.com/3"&gt;Sublime Text&lt;/a&gt; installed in your computer.&lt;/li&gt;
&lt;li&gt;Have written &amp;amp; ran programs in Python from the command line&lt;/li&gt;
&lt;li&gt;Have some idea about lists, dictionaries and functions&lt;/li&gt;
&lt;li&gt;Have created a virtual environment and installing packages with &lt;code&gt;pip&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;You have read the &lt;a href="http://flask.pocoo.org/docs/0.12/quickstart/"&gt;flask quick introduction&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;What is not supported&lt;/h4&gt;
&lt;p&gt;This project is not tested using Jupyter Notebook, PyCharm,
Spider, or any other ide/text editor/programming environment for that matter.
Atom or Sublime Text and the command line are the only supported development
environment for this project.&lt;/p&gt;
&lt;p&gt;Sounds good? Then let's dive into building a fully functional web app using flask.&lt;/p&gt;
&lt;h4&gt;Minimum Viable Product&lt;/h4&gt;
&lt;p&gt;Our objective is to build an web based interface using Flask that&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Shows a list of people who have RSVP-ed for the project Night&lt;/li&gt;
&lt;li&gt;Each entry in the list should have&lt;/li&gt;
&lt;li&gt;The name of the person&lt;/li&gt;
&lt;li&gt;The meetup.com profile image of the person&lt;/li&gt;
&lt;li&gt;An input text box that allows entering lines of code&lt;/li&gt;
&lt;li&gt;On hitting the submit button we should get teams of four&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;Flask&lt;/h4&gt;
&lt;p&gt;For building the web interface, we will be using Flask.
Flask is a micro web framework - it takes care of handling of the HTTP
protocol for you and allows you focus on your application. It is flexible,
lightweight yet powerful.&lt;/p&gt;
&lt;h4&gt;Setup your environment&lt;/h4&gt;
&lt;h5&gt;Get the source code&lt;/h5&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If you are familiar with &lt;code&gt;git&lt;/code&gt;, run&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;git clone https://github.com/chicagopython/CodingWorkshops.git
&lt;/pre&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If not, go to https://github.com/chicagopython/CodingWorkshops&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Click on the Download Zip and unzip the file that gets downloaded&lt;/li&gt;
&lt;li&gt;From your command line, change directory to the path where you have downloaded it.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;On linux or OS X&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; cd path/to/CodingWorkshops/problems/webdev/flask_team_project/
&lt;/pre&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;On Windows&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; cd path\to\CodingWorkshops\problems\webdev\flask_team_project
&lt;/pre&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here you will find the basic skeleton of the app under &lt;code&gt;app.py&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;Set up virtualenv&lt;/h4&gt;
&lt;p&gt;If you are using Linux or OS X, run the following to create a new virtualenv&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;python3 -m venv venv
source venv/bin/activate
pip install -r requirements.txt
export FLASK_APP=app.py
&lt;/pre&gt;


&lt;p&gt;On Windows, run the following&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;python3 -m venv venv
venv\Scripts\activate
pip install -r requirements.txt
set %FLASK_APP%=app.py
&lt;/pre&gt;


&lt;p&gt;&lt;a href="https://asciinema.org/a/M1hP91h153PuOPEjVYbot6jPj"&gt;&lt;img alt="asciicast" src="https://asciinema.org/a/M1hP91h153PuOPEjVYbot6jPj.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;h4&gt;Feature 0: run app.py&lt;/h4&gt;
&lt;p&gt;With your environment now set up run&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;flask run
&lt;/pre&gt;


&lt;p&gt;And you'll see ð¥.&lt;/p&gt;
&lt;p&gt;The reason is there is a string in the &lt;code&gt;app.py&lt;/code&gt; file that allows meetup.com to identify who is trying to get data from them. It is called the API key. The one currently in the code is one of my old ones. You need to get one for your team from &lt;a href="https://secure.meetup.com/meetup_api/key/"&gt;here&lt;/a&gt; - obviously, you'll have to be logged into meetup.com to get the key.
Plug in your key whereever most relevant in &lt;code&gt;app.py&lt;/code&gt; and run the above command again.&lt;/p&gt;
&lt;p&gt;This will start a &lt;a href="https://developer.mozilla.org/en-US/docs/Learn/Common_questions/What_is_a_web_server"&gt;web server&lt;/a&gt; on port 5000.
Next load up http://locahost:5000/rsvps in your web browser. &lt;/p&gt;
&lt;p&gt;This will show you the list of people who RSVPed for a previous meetup.
Goto tonight's meetup page and get the meetup id from the url.&lt;/p&gt;
&lt;p&gt;https://www.meetup.com/&lt;em&gt;ChiPy&lt;/em&gt;/events/244121900/&lt;/p&gt;
&lt;p&gt;The last section of the url is the &lt;code&gt;event_id&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;Feature 1: Read app.py&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;app.py&lt;/code&gt; is the script is where the magic happens.&lt;/p&gt;
&lt;p&gt;Lets start at the routes:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;@app.route('/rsvps')
def rsvps():


@app.route('/teams', methods=['GET', 'POST'])
def teams():
&lt;/pre&gt;


&lt;p&gt;Discuss among the team how render_template function is used in rsvps and teams
function.&lt;/p&gt;
&lt;p&gt;Two useful tools are pretty print and &lt;code&gt;pdb&lt;/code&gt;&lt;/p&gt;
&lt;h5&gt;Pretty print&lt;/h5&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;from&lt;/span&gt; &lt;span class="nn"&gt;pprint&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="n"&gt;pprint&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;pp&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;pp&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;member_rsvps&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;This will give you a better view of what the function &lt;code&gt;get_names()&lt;/code&gt; returns.&lt;/p&gt;
&lt;h5&gt;pdb&lt;/h5&gt;
&lt;p&gt;Python comes with a debugger &lt;code&gt;pdb&lt;/code&gt;. Here's a &lt;a href="https://appletree.or.kr/quick_reference_cards/Python/Python%20Debugger%20Cheatsheet.pdf"&gt;cheat sheet&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;You can stick the following line anywhere in the code and make it halt so that you can better inspect the data and flow.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;pdb&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="n"&gt;pdb&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;set_trace&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;


&lt;h4&gt;Feature 2: Show profile images in rsvps&lt;/h4&gt;
&lt;p&gt;Make changes to rsvps.html (inside templates) to show images of next to the
names of the people.&lt;/p&gt;
&lt;h4&gt;Feature 3: Add a text box next for lines of code&lt;/h4&gt;
&lt;p&gt;Add an input type textbox that will take a number as input&lt;/p&gt;
&lt;h4&gt;Feature 4: Display the lines of code&lt;/h4&gt;
&lt;p&gt;On hitting submit, the numbers you entered against each person should show up
on the &lt;code&gt;/teams&lt;/code&gt; page.&lt;/p&gt;
&lt;h4&gt;Feature 5: Display teams&lt;/h4&gt;
&lt;p&gt;As of now, everybody is listed under one team: Team 1.
Split the list of people selected into teams of 4&lt;/p&gt;
&lt;p&gt;Your display of each team should include&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;Team Number: XYZ
Name of team member1, Lines of code, (pic)
Name of team member2, Lines of code, (pic)
Name of team member3, Lines of code, (pic)
Name of team member4, Lines of code, (pic)
(Total lines of code:)
&lt;/pre&gt;


&lt;p&gt;where things in () are optional.
There is no specific criteria for creating the teams as of now. We handle that
next.&lt;/p&gt;
&lt;h4&gt;Feature 6: Tell the world&lt;/h4&gt;
&lt;p&gt;Record a gif of your app in motion and tweet tweet the link to @chicagopython with "Python Project Night Mentorship". Include the twitter handles of your team members.&lt;/p&gt;
&lt;h4&gt;Feature 7: Integrate team creating logic (optional)&lt;/h4&gt;
&lt;p&gt;Code reuse is a hallmark well written code base. Of course, we are
not talking about copy pasting the code, but using the abstractions that a
programming language provides so that there is minimum duplication of code.&lt;/p&gt;
&lt;p&gt;Use the code that you wrote in the team project command line application. The logic
that you have implemented earlier for grouping your list of people into teams
should now be used for creating your teams.&lt;/p&gt;
&lt;p&gt;Thanks! Thats all folks!
If you found a bug or think you some instructions are missing - just open a issue in this repository.&lt;/p&gt;&lt;/div&gt;</description><category>flask</category><category>web-dev</category><guid>https://chicagopython.github.io/posts/flask-app-to-group-project-night-challengers/</guid><pubDate>Sun, 17 Mar 2019 05:12:37 GMT</pubDate></item></channel></rss>