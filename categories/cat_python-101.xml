<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Python Project Night Challenges (Posts about python-101)</title><link>https://chicagopython.github.io/</link><description></description><atom:link href="https://chicagopython.github.io/categories/cat_python-101.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents ¬© 2019 &lt;a href="mailto:chicago-sig-organizers@python.org"&gt;Chicago Python User Group&lt;/a&gt; 
&lt;a rel="license" href="https://www.gnu.org/licenses/gpl-3.0.en.html"&gt;
&lt;img alt="Gnu Public License version 3.0"
style="border-width:0;"
src="https://www.gnu.org/graphics/gplv3-with-text-84x42.png"&gt;&lt;/a&gt;</copyright><lastBuildDate>Sun, 15 Sep 2019 16:24:28 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Make a Game</title><link>https://chicagopython.github.io/posts/make-a-game/</link><dc:creator>Chicago Python User Group</dc:creator><description>&lt;div&gt;&lt;h3&gt;Overview&lt;/h3&gt;
&lt;p&gt;For a long time, computer games made use of few, if any, graphics. Many of them were text based adventures that you could run directly on your command line. Some examples included:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Zork"&gt;Zork&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Adventureland&lt;/li&gt;
&lt;li&gt;&lt;a href="https://en.wikipedia.org/wiki/Dwarf_Fortress"&gt;Dwarf Fortress&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;and many others. Players would input their directions using words and the computer would return back what happened. &lt;/p&gt;
&lt;h3&gt;Your Task&lt;/h3&gt;
&lt;p&gt;Your task for this evening is to, working together, create something fun to play! Your group will take turns typing (in other words, one computer per group and only one person typing at a time) and helping to develop (offering ideas, thoughts on what to do next, etc.). It can be helpful to have another person with their computer open to research, but ultimately, this is a group effort! Everyone should have a chance to write code, offer suggestions, research libraries, etc. &lt;/p&gt;
&lt;h3&gt;Setup&lt;/h3&gt;
&lt;ol&gt;
&lt;li&gt;You'll need one computer that your group will share that can install and run &lt;a href="https://pipenv-fork.readthedocs.io/en/latest/"&gt;Pipenv&lt;/a&gt;. While an OS-X or Linux machine will likely do the best for this step, a Windows machine will be able to do it as well. If you run into any challenges installing Pipenv, please ask for help!&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;The project is in the ChiPy project night repo. If you do not have the repository already, run &lt;/p&gt;
&lt;p&gt;&lt;code&gt;git clone https://github.com/chicagopython/CodingWorkshops.git&lt;/code&gt;
3. Navigate to the folder for this challenge:&lt;/p&gt;
&lt;p&gt;&lt;code&gt;cd CodingWorkshops/problems/py101/make_a_game&lt;/code&gt; 
4. Run &lt;code&gt;pipenv install&lt;/code&gt;, which will install all of the libraries we have recommended for this exercise.
5. After you've installed all of the libraries, run &lt;code&gt;pipenv shell&lt;/code&gt;, which will turn on a virtual environment running Python 3.7.
6. Run &lt;code&gt;python run.py&lt;/code&gt; to see the program in its current state or &lt;code&gt;pytest -vv&lt;/code&gt; to run all tests.
7. If you make changes, this project uses a library called &lt;a href="https://github.com/psf/black"&gt;Black&lt;/a&gt; to automatically format the code for you (this known as a &lt;a href="https://en.wikipedia.org/wiki/Lint_(software)"&gt;linter&lt;/a&gt;. To run it, from the root of the directory, run &lt;code&gt;black .&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;What's in this repository?&lt;/h3&gt;
&lt;p&gt;In this repository is a basic shell of a game. This game sets up a &lt;code&gt;Player()&lt;/code&gt; which parrots back what the player writes to it until they decide to leave. Some of the key features here that you might want to use or modify or extend are:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;em&gt;Tests&lt;/em&gt; -- in the &lt;code&gt;tests/&lt;/code&gt; folder are a series of tests to make sure that the &lt;code&gt;Player()&lt;/code&gt; object continues to work as expected. As you add new functionality, you might want to practice &lt;a href="https://en.wikipedia.org/wiki/Test-driven_development"&gt;test-driven development&lt;/a&gt; to ensure that your code continues to work as you want it to!&lt;/li&gt;
&lt;li&gt;&lt;em&gt;run.py&lt;/em&gt; -- This is the main file that the player will run to play the game. One thing to note is the section that starts with &lt;code&gt;while player.in_game:&lt;/code&gt; -- this section sets up a loop that will keep running until the &lt;code&gt;in_game&lt;/code&gt; attribute is set to False. This way, your players can continue to do things and the game won't run once through the code and immediately finish. You'll likely add extra things into this section.&lt;/li&gt;
&lt;li&gt;&lt;em&gt;Player() class&lt;/em&gt; -- This class holds information about the player -- what its name is, what message it wants to repeat, whether it still wants to play the game...classes are useful for persisting or modifying some sort of collected state or values about a "thing", as well as defining actions that that thing may take. For example, our &lt;code&gt;Player()&lt;/code&gt; can currently &lt;code&gt;say_hello()&lt;/code&gt; and it has an &lt;code&gt;in_game&lt;/code&gt; status that can be either &lt;code&gt;True&lt;/code&gt; or &lt;code&gt;False&lt;/code&gt;. A different object might have different behaviors or different attributes that can be set. Depending on your game, you may want to set up more of these classes -- for example, you could set up a &lt;code&gt;Map()&lt;/code&gt; class to hold onto information about a map (what room the player is currently in, what rooms they can go to, etc.) or an &lt;code&gt;Enemy()&lt;/code&gt; class (what the enemy can do, how it interacts with the player, whether it is defeated or not, etc.&lt;/li&gt;
&lt;/ol&gt;
&lt;h3&gt;So what should we do?&lt;/h3&gt;
&lt;p&gt;A good way to begin might be the following:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;Decide what type of game you want to make: do you want to make a madlibs clone? Tic-tac-toe? A small dungeon? A word game? Put together a couple of ideas and identify what you'd like to build (and don't worry if you don't finish in time! This exercise is for you to be introduced to some Python concepts, not to emerge with a fully-developed game).&lt;/li&gt;
&lt;li&gt;Identify what basic building blocks you would need to interact with in the game. For example, if you were making a madlibs clone, you would want to identify what the user could enter, some scripts for those words to be entered into, and something that reads the story out after all the words have been entered. This can help with figuring out the basic flow of the game (for example, you would not want the story to be revealed before all the words are entered!)&lt;/li&gt;
&lt;li&gt;Start adding code and testing the game -- you could both add automated tests (like the ones in &lt;code&gt;tests/&lt;/code&gt; or try playing your game to see if it works. &lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;Happy Developing!&lt;/p&gt;&lt;/div&gt;</description><guid>https://chicagopython.github.io/posts/make-a-game/</guid><pubDate>Thu, 19 Sep 2019 11:00:00 GMT</pubDate></item><item><title>trackcoder</title><link>https://chicagopython.github.io/posts/trackcoder/</link><dc:creator>Chicago Python User Group</dc:creator><description>&lt;div&gt;&lt;h2&gt;1. trackcoder: The Mentorship Journal&lt;/h2&gt;
&lt;p&gt;Chipy's mentorship program is an extra-ordinary jounery for becoming a better developer.
As a mentee, you are expected to do a lot - you read new articles/books, write code,
debug and troubleshoot, pair program with other mentees in coding workshop or your mentor.
This is involves managing time efficiently and doing the effective things.
But as the old adage goes, "you can't manage what you can't measure".&lt;/p&gt;
&lt;p&gt;This project is the first of the three part series of building tools for the mentees for
tracking time. The end goal of such a tool will be to give you a tool that helps you record mini
journal entires every day. The tool would also show you insight into your learning patterns
allowing you to make better decisions on when allocating time for self directed learnings beyond the
mentorship program.  &lt;/p&gt;
&lt;h3&gt;1.1. The Done list&lt;/h3&gt;
&lt;p&gt;Lets say you were to keep an account of every thing you have accomplished during your mentorship.
The minimalistic way for doing that would be noting things down in a text file - think of it as
a journal that you update frequently.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="nv"&gt;Date&lt;/span&gt;: &lt;span class="mi"&gt;02&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2019&lt;/span&gt;
    &lt;span class="nv"&gt;first&lt;/span&gt; &lt;span class="nv"&gt;blog&lt;/span&gt; &lt;span class="nv"&gt;post&lt;/span&gt; &lt;span class="nv"&gt;completed&lt;/span&gt; üèÖ
    &lt;span class="nv"&gt;learned&lt;/span&gt; &lt;span class="nv"&gt;about&lt;/span&gt; &lt;span class="nv"&gt;using&lt;/span&gt; &lt;span class="nv"&gt;click&lt;/span&gt; &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;project&lt;/span&gt; &lt;span class="nv"&gt;night&lt;/span&gt;
    &lt;span class="nv"&gt;updated&lt;/span&gt; &lt;span class="nv"&gt;cli&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;app&lt;/span&gt;

    &lt;span class="nv"&gt;Date&lt;/span&gt;: &lt;span class="mi"&gt;02&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2019&lt;/span&gt;
    &lt;span class="nv"&gt;read&lt;/span&gt; &lt;span class="nv"&gt;good&lt;/span&gt; &lt;span class="nv"&gt;article&lt;/span&gt; &lt;span class="nv"&gt;on&lt;/span&gt; &lt;span class="nv"&gt;decorators&lt;/span&gt; &lt;span class="nv"&gt;http&lt;/span&gt;:&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="nv"&gt;realpython&lt;/span&gt;.&lt;span class="nv"&gt;org&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
    &lt;span class="nv"&gt;refactored&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;decorators&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;orthogonal&lt;/span&gt; &lt;span class="nv"&gt;logic&lt;/span&gt;
    &lt;span class="nv"&gt;debugging&lt;/span&gt; &lt;span class="nv"&gt;decorators&lt;/span&gt;
    &lt;span class="nv"&gt;met&lt;/span&gt; &lt;span class="nv"&gt;with&lt;/span&gt; &lt;span class="nv"&gt;mentor&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;fix&lt;/span&gt; &lt;span class="nv"&gt;decorator&lt;/span&gt; &lt;span class="nv"&gt;issues&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;With a little bit of effort, you can capture two more data points with each of the accomplishment
you are recording in this mini journal entry.&lt;/p&gt;
&lt;p&gt;(a) the time spent
(b) the type of activity&lt;/p&gt;
&lt;p&gt;These will form the basis of gaining insights into your personal learning patterns.&lt;/p&gt;
&lt;p&gt;For example:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;Date&lt;/span&gt;: &lt;span class="mi"&gt;02&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2019&lt;/span&gt;
&lt;span class="nv"&gt;first&lt;/span&gt; &lt;span class="nv"&gt;blog&lt;/span&gt; &lt;span class="nv"&gt;post&lt;/span&gt;, &lt;span class="nv"&gt;blogging&lt;/span&gt;, &lt;span class="mi"&gt;120&lt;/span&gt; &lt;span class="nv"&gt;mins&lt;/span&gt;
&lt;span class="nv"&gt;learned&lt;/span&gt; &lt;span class="nv"&gt;about&lt;/span&gt; &lt;span class="nv"&gt;using&lt;/span&gt; &lt;span class="nv"&gt;click&lt;/span&gt; &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;project&lt;/span&gt; &lt;span class="nv"&gt;night&lt;/span&gt;, &lt;span class="nv"&gt;pair_programming&lt;/span&gt;, &lt;span class="mi"&gt;120&lt;/span&gt; &lt;span class="nv"&gt;mins&lt;/span&gt;
&lt;span class="nv"&gt;updated&lt;/span&gt; &lt;span class="nv"&gt;cli&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;app&lt;/span&gt;, &lt;span class="nv"&gt;coding&lt;/span&gt;, &lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="nv"&gt;mins&lt;/span&gt;

&lt;span class="nv"&gt;Date&lt;/span&gt;: &lt;span class="mi"&gt;02&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2019&lt;/span&gt;
&lt;span class="nv"&gt;read&lt;/span&gt; &lt;span class="nv"&gt;good&lt;/span&gt; &lt;span class="nv"&gt;article&lt;/span&gt; &lt;span class="nv"&gt;on&lt;/span&gt; &lt;span class="nv"&gt;decorators&lt;/span&gt; &lt;span class="nv"&gt;http&lt;/span&gt;:&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="nv"&gt;realpython&lt;/span&gt;.&lt;span class="nv"&gt;org&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;, &lt;span class="nv"&gt;research&lt;/span&gt;, &lt;span class="mi"&gt;45&lt;/span&gt; &lt;span class="nv"&gt;mins&lt;/span&gt;
&lt;span class="nv"&gt;refactored&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;decorators&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;orthogonal&lt;/span&gt; &lt;span class="nv"&gt;logic&lt;/span&gt;, &lt;span class="nv"&gt;coding&lt;/span&gt;, &lt;span class="mi"&gt;30&lt;/span&gt; &lt;span class="nv"&gt;mins&lt;/span&gt;
&lt;span class="nv"&gt;debugging&lt;/span&gt; &lt;span class="nv"&gt;decorators&lt;/span&gt;, &lt;span class="nv"&gt;debugging&lt;/span&gt;, &lt;span class="mi"&gt;30&lt;/span&gt; &lt;span class="nv"&gt;mins&lt;/span&gt;
&lt;span class="nv"&gt;met&lt;/span&gt; &lt;span class="nv"&gt;with&lt;/span&gt; &lt;span class="nv"&gt;mentor&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;fix&lt;/span&gt; &lt;span class="nv"&gt;decorator&lt;/span&gt; &lt;span class="nv"&gt;issues&lt;/span&gt;, &lt;span class="nv"&gt;mentor&lt;/span&gt;, &lt;span class="mi"&gt;60&lt;/span&gt; &lt;span class="nv"&gt;mins&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;While recording each of these activities have taken up time, you'll probably find one was
more useful than the other. So add another field to your
entry, effectiveness and refactor a little bit.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="mi"&gt;02&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2019&lt;/span&gt;, &lt;span class="nv"&gt;first&lt;/span&gt; &lt;span class="nv"&gt;blog&lt;/span&gt; &lt;span class="nv"&gt;post&lt;/span&gt;, &lt;span class="nv"&gt;blogging&lt;/span&gt;, &lt;span class="mi"&gt;120&lt;/span&gt; &lt;span class="nv"&gt;mins&lt;/span&gt;, &lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="mi"&gt;02&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2019&lt;/span&gt;, &lt;span class="nv"&gt;learned&lt;/span&gt; &lt;span class="nv"&gt;about&lt;/span&gt; &lt;span class="nv"&gt;using&lt;/span&gt; &lt;span class="nv"&gt;click&lt;/span&gt; &lt;span class="nv"&gt;at&lt;/span&gt; &lt;span class="nv"&gt;project&lt;/span&gt; &lt;span class="nv"&gt;night&lt;/span&gt;, &lt;span class="nv"&gt;pair_programming&lt;/span&gt;, &lt;span class="mi"&gt;120&lt;/span&gt; &lt;span class="nv"&gt;mins&lt;/span&gt;, &lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="mi"&gt;02&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;20&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2019&lt;/span&gt;, &lt;span class="nv"&gt;updated&lt;/span&gt; &lt;span class="nv"&gt;cli&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;app&lt;/span&gt;, &lt;span class="nv"&gt;coding&lt;/span&gt;, &lt;span class="mi"&gt;20&lt;/span&gt; &lt;span class="nv"&gt;mins&lt;/span&gt;, &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="mi"&gt;02&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2019&lt;/span&gt;, &lt;span class="nv"&gt;read&lt;/span&gt; &lt;span class="nv"&gt;good&lt;/span&gt; &lt;span class="nv"&gt;article&lt;/span&gt; &lt;span class="nv"&gt;on&lt;/span&gt; &lt;span class="nv"&gt;decorators&lt;/span&gt; &lt;span class="nv"&gt;http&lt;/span&gt;:&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="nv"&gt;realpython&lt;/span&gt;.&lt;span class="nv"&gt;org&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;, &lt;span class="nv"&gt;research&lt;/span&gt;, &lt;span class="mi"&gt;45&lt;/span&gt; &lt;span class="nv"&gt;mins&lt;/span&gt;, &lt;span class="mi"&gt;4&lt;/span&gt;
&lt;span class="mi"&gt;02&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2019&lt;/span&gt;, &lt;span class="nv"&gt;refactored&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;use&lt;/span&gt; &lt;span class="nv"&gt;decorators&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;orthogonal&lt;/span&gt; &lt;span class="nv"&gt;logic&lt;/span&gt;, &lt;span class="nv"&gt;coding&lt;/span&gt;, &lt;span class="mi"&gt;30&lt;/span&gt; &lt;span class="nv"&gt;mins&lt;/span&gt;, &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;span class="mi"&gt;02&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2019&lt;/span&gt;, &lt;span class="nv"&gt;debugging&lt;/span&gt; &lt;span class="nv"&gt;decorators&lt;/span&gt;, &lt;span class="nv"&gt;debugging&lt;/span&gt;, &lt;span class="mi"&gt;30&lt;/span&gt; &lt;span class="nv"&gt;mins&lt;/span&gt;, &lt;span class="mi"&gt;2&lt;/span&gt;
&lt;span class="mi"&gt;02&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;2019&lt;/span&gt;, &lt;span class="nv"&gt;met&lt;/span&gt; &lt;span class="nv"&gt;with&lt;/span&gt; &lt;span class="nv"&gt;mentor&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;fix&lt;/span&gt; &lt;span class="nv"&gt;decorator&lt;/span&gt; &lt;span class="nv"&gt;issues&lt;/span&gt;, &lt;span class="nv"&gt;mentor&lt;/span&gt;, &lt;span class="mi"&gt;60&lt;/span&gt; &lt;span class="nv"&gt;mins&lt;/span&gt;, &lt;span class="mi"&gt;5&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;If you save this file as a .csv now and open it in excel, you'll be able to get an account of how your time has been spent by selecting all the rows
for the last but one column. Taking the next step, you can very easily build a bar graph of time spent per day by including the first column.&lt;/p&gt;
&lt;p&gt;&lt;img alt="csv.png" src="https://chicagopython.github.io/images/csv.png"&gt;&lt;/p&gt;
&lt;p&gt;We could have stopped right here and let you continue with a spreadsheet. as a system for your mentorship journal. But lets make it a fun, reliable,and smooth.&lt;/p&gt;
&lt;h4&gt;1.1.1. The Data structure&lt;/h4&gt;
&lt;p&gt;Having looked at the data we intend to capture, lets try to reason how each entry in the row
can be represented by variables in a script and what their type would be like.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;task&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt;
    &lt;span class="n"&gt;description&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;str&lt;/span&gt;
    &lt;span class="k"&gt;timestamp&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;datetime&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;timestamp&lt;/span&gt;
    &lt;span class="n"&gt;mins&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;
    &lt;span class="n"&gt;effective&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;int&lt;/span&gt;
    &lt;span class="n"&gt;done&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;bool&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Note: I have sneaked in a variable &lt;code&gt;done&lt;/code&gt;, which can tell us if this task is completed. We would not use it right now, but with a little bit of effort we can use this field to enhance this app to have a Todo list feature. With these as a member variables, we can now define a &lt;code&gt;class&lt;/code&gt; for our &lt;code&gt;app.py&lt;/code&gt;. A class is nothing but an abstract representation of how each of our data record (or object) should look like and behave.&lt;/p&gt;
&lt;p&gt;You'll find this in &lt;code&gt;app.py&lt;/code&gt;-s line 16-22.&lt;/p&gt;
&lt;h4&gt;1.1.2. Replacing csv with a database&lt;/h4&gt;
&lt;p&gt;csv or spreadsheets are a good start for storing data, but are not without limitations. For project like ours, where we are looking to do automation, analytics and integration with more than one system we should be better of using a database.
There are a lot of databases to chose from, however but for something simple like ours we will use the &lt;code&gt;sqlite&lt;/code&gt; that comes with the python installation. Lets now look at the different ways how we can capture the data in a python script, persist it into the database, and as well as retrieve it for further processing.&lt;/p&gt;
&lt;h5&gt;1.1.2.1. Object Relational Mapper (ORM)&lt;/h5&gt;
&lt;p&gt;Each of your mini journal entry would be first captured as
a Python object using the &lt;code&gt;app.py&lt;/code&gt; script that we will build in part 1. &lt;code&gt;app.py&lt;/code&gt; will also convert the python object
into a database record using an Object Relatoinal Mapper(orm) and persist the data into the database. If you want to retrieve/update/delete a record from the database, the ORM allows you to use a similar Pythonic code to get the data back.&lt;/p&gt;
&lt;h5&gt;1.1.2.2. SQL/Pandas&lt;/h5&gt;
&lt;p&gt;While the ORM allows you to write Python directly, the primary mechanism for querying the data in relational databases is
Structed Query Language (SQL) which is english like query language that allows you to create,
retrieve, summarize and analyze the data. We would be using SQL and pandas in part three for analysis of the data.&lt;/p&gt;
&lt;h4&gt;1.1.3. Building the app in three parts&lt;/h4&gt;
&lt;p&gt;&lt;img alt="project.png" src="https://chicagopython.github.io/images/project.png"&gt;&lt;/p&gt;
&lt;h4&gt;1.1.4. Part 1: The terminal client&lt;/h4&gt;
&lt;p&gt;Since most of our development time is spent on a terminal, in part 1 we will be building a terminal based client. The client will provide a simple interface to add a data record of your mini journal entry into the database.&lt;/p&gt;
&lt;h4&gt;1.1.5. Part 2: Web interface&lt;/h4&gt;
&lt;p&gt;After the database has been populated with entries we made in part 1, we will build a web interface that pulls
up data from the database and presents a dashboard to show where time was spent.&lt;/p&gt;
&lt;p&gt;&lt;img alt="dashboard" src="https://chicagopython.github.io/images/dashboard.gif"&gt;&lt;/p&gt;
&lt;h4&gt;1.1.6. Part 3: Data Analysis&lt;/h4&gt;
&lt;p&gt;Once the data enty and output part is complete, in part 3, we will use data science tools to
answer questions regarding your learning patterns. As a strech goal, we will enhance the dashboard built in part 2, with metrics and insights coming out of part 3.&lt;/p&gt;
&lt;h3&gt;1.2. Part 1&lt;/h3&gt;
&lt;p&gt;In this project we will explore&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;How to build command line applications using &lt;code&gt;prompt_toolkit&lt;/code&gt;, &lt;code&gt;click&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;How to store data in sqlite database that comes with Python using &lt;code&gt;peewee&lt;/code&gt; ORM&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;1.3. Setup Instructions&lt;/h3&gt;
&lt;p&gt;You will need a text editor like Visual Studio Code, Atom or Sublime Text. Since this
you'll be working in a group, having an editor that does not get in the way of solving
the problem is essential. So stick to what every one in your team is familiar with.&lt;/p&gt;
&lt;h4&gt;1.3.1. Download .zip from github&lt;/h4&gt;
&lt;p&gt;If you are not familiar with &lt;code&gt;git&lt;/code&gt;, you can download the repository from &lt;a href="https://github.com/chicagopython/CodingWorkshops/archive/master.zip"&gt;here&lt;/a&gt;.
Clicking on the link will download a .zip file to your computer. Next you need to
navigate to the folder where it was downloaded and unzip the folder. Once you have
the CodingWorkshop directory, you can go to step 1.5.&lt;/p&gt;
&lt;h4&gt;1.3.2. Git and Github [Optional]&lt;/h4&gt;
&lt;p&gt;After completing the steps below you should have a github account and be able to push
your local changes to this repository to github.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Follow the setup steps described &lt;a href="https://help.github.com/articles/set-up-git/"&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Read the steps described in &lt;a href="https://help.github.com/articles/fork-a-repo"&gt;fork a repo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Use the steps described above to fork this repository &lt;a href="https://github.com/chicagopython/CodingWorkshops"&gt;CodingWorkshops&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The changes that you make as a part of this exercise, will be pushed to the fork you created for this
repository.&lt;/p&gt;
&lt;p&gt;In case you have already have created a fork of this repository in your github account, you will
want to bring it up to date with the recent changes. In that case,
you will need to do the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://help.github.com/articles/configuring-a-remote-for-a-fork/"&gt;configuring a remote fork&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://help.github.com/articles/syncing-a-fork/"&gt;syncing a fork&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;1.4. Python&lt;/h3&gt;
&lt;p&gt;This project has made no attempt to be compatible with Python 2.7. üòé&lt;/p&gt;
&lt;p&gt;Recommended version: Python 3.6 or higher.&lt;/p&gt;
&lt;h3&gt;1.5. Quick Git command refresher [Optional]&lt;/h3&gt;
&lt;p&gt;Below are the few most used git commands&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;git&lt;/span&gt; &lt;span class="nv"&gt;checkout&lt;/span&gt; &lt;span class="nv"&gt;master&lt;/span&gt;          # &lt;span class="nv"&gt;checkout&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;master&lt;/span&gt; &lt;span class="nv"&gt;branch&lt;/span&gt;
&lt;span class="nv"&gt;git&lt;/span&gt; &lt;span class="nv"&gt;checkout&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;b&lt;/span&gt; &lt;span class="nv"&gt;feature&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;cool&lt;/span&gt; # &lt;span class="nv"&gt;crate&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;new&lt;/span&gt; &lt;span class="nv"&gt;branch&lt;/span&gt; &lt;span class="nv"&gt;feature&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;cool&lt;/span&gt;
&lt;span class="nv"&gt;git&lt;/span&gt; &lt;span class="nv"&gt;add&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;u&lt;/span&gt;                   # &lt;span class="nv"&gt;stage&lt;/span&gt; &lt;span class="nv"&gt;all&lt;/span&gt; &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;updates&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;commit&lt;/span&gt;
&lt;span class="nv"&gt;git&lt;/span&gt; &lt;span class="nv"&gt;commit&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;am&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;Adding changes and commiting with a comment&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="nv"&gt;git&lt;/span&gt; &lt;span class="nv"&gt;push&lt;/span&gt; &lt;span class="nv"&gt;origin&lt;/span&gt; &lt;span class="nv"&gt;master&lt;/span&gt;       # &lt;span class="nv"&gt;push&lt;/span&gt; &lt;span class="nv"&gt;commits&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;develop&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;ci&lt;/span&gt; &lt;span class="nv"&gt;branch&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Note for this exercise, we will be working on the master branch directly. However,
that is NOT a best practice. Branches are cheap in git, so a new feature or fix
would first go to a branch, get tested, code reviewed and finally merged to master.&lt;/p&gt;
&lt;h3&gt;1.6. Documentation references&lt;/h3&gt;
&lt;p&gt;Below are the libraries used by this program.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://python-prompt-toolkit.readthedocs.io/en/master/"&gt;prompt_toolkit&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://click.pocoo.org/5/"&gt;click&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="http://docs.peewee-orm.com/en/latest/"&gt;peewee&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;1.7. Exercise 0: Project Setup&lt;/h3&gt;
&lt;p&gt;After completing the steps in setup, you should have the cloned versoin of the fork of &lt;code&gt;CodingWorkshop&lt;/code&gt;
repository in your local machine. Lets take the time to look at the structure of this
project. All code is located under &lt;code&gt;/problems/py101/trackcoder&lt;/code&gt; directory. So from your
terminal go to the directory where you have cloned the repository.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;CodingWorkshop&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;problems&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;py101&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;trackcoder&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Make sure you are in this directory for the remainder of this project.&lt;/p&gt;
&lt;p&gt;Run &lt;code&gt;pwd&lt;/code&gt; (&lt;code&gt;cwd&lt;/code&gt; for Windows) on the command prompt to find out which directory you
are on.&lt;/p&gt;
&lt;p&gt;Your output should end in &lt;code&gt;problems/py101/trackcoder&lt;/code&gt; and contain the files described
below.&lt;/p&gt;
&lt;h4&gt;1.7.1. &lt;code&gt;app.py&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;This file contains the code required to get you started with building the project.
You will be building on top of what has been provided in this file.&lt;/p&gt;
&lt;h4&gt;1.7.2. &lt;code&gt;Makefile&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;This file contains the commands that are required building the project.
You can run &lt;code&gt;make help&lt;/code&gt; to see what are the options.&lt;/p&gt;
&lt;p&gt;Note Makefile would not work on Windows out of the box.&lt;/p&gt;
&lt;h4&gt;1.7.3. &lt;code&gt;Pipfile&lt;/code&gt; and &lt;code&gt;Pipfile.lock&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;These two files are used by &lt;code&gt;pipenv&lt;/code&gt; to create a virtual enviornment that
isolates all the dependencies of this project from other python projects in your computer.
Learn more about &lt;a href="https://docs.pipenv.org/"&gt;pipenv&lt;/a&gt;.&lt;/p&gt;
&lt;h3&gt;1.8. Exercise 1: Build&lt;/h3&gt;
&lt;p&gt;From the &lt;code&gt;/problems/py101/trackcoder&lt;/code&gt; directory, run&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;make&lt;/span&gt;
&lt;/pre&gt;


&lt;ul&gt;
&lt;li&gt;Which packages got installed?&lt;/li&gt;
&lt;li&gt;Which version of python is getting used?&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Skip this exercise for Windows. Install the dependencies using&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;prompt_toolkit&lt;/span&gt; &lt;span class="n"&gt;Click&lt;/span&gt; &lt;span class="n"&gt;peewee&lt;/span&gt;
&lt;/pre&gt;


&lt;h3&gt;1.9. Exercise 2: Run the program&lt;/h3&gt;
&lt;p&gt;First shell into your virtual environment&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;make&lt;/span&gt; &lt;span class="n"&gt;shell&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;This should activate your virtual enviornment, i.e. give you access to a python
environment where all the dependencies for this project has been installed.&lt;/p&gt;
&lt;p&gt;Note: If the above command errors out, or you are on Windows, run the following to get into
a shell with the virtualenv acitvated.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;pipenv&lt;/span&gt; &lt;span class="n"&gt;shell&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;If everything fails,&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="n"&gt;prompt_toolkit&lt;/span&gt; &lt;span class="n"&gt;Click&lt;/span&gt; &lt;span class="n"&gt;peewee&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Start by running&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="c1"&gt;--help&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;What are the possible options that command has?
Run each option with --help option to see what is the help message provided.&lt;/p&gt;
&lt;h3&gt;1.10. Exercise 3: Fix the help message&lt;/h3&gt;
&lt;h4&gt;1.10.1. Interactive mode&lt;/h4&gt;
&lt;p&gt;Running &lt;code&gt;app.py&lt;/code&gt; with &lt;code&gt;-i&lt;/code&gt; - should start the app in interactive mode.
Once in interactive mode, there are two commands &lt;code&gt;add&lt;/code&gt; and &lt;code&gt;show&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The &lt;code&gt;add&lt;/code&gt; command allows adding a new &lt;code&gt;Task&lt;/code&gt;. The format is&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;% add b 10 first paragraph of first blog post&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;here &lt;code&gt;b&lt;/code&gt; is the abbreviations for blogging, &lt;code&gt;10&lt;/code&gt; shows the time taken for the task. Rest of the sentence is comment.
There are only 6 possible Task types&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;blogging (b)&lt;/li&gt;
&lt;li&gt;coding (c)&lt;/li&gt;
&lt;li&gt;debugging (d)&lt;/li&gt;
&lt;li&gt;pair programming at project night (p)&lt;/li&gt;
&lt;li&gt;research (r)&lt;/li&gt;
&lt;li&gt;meeting with mentor (m)&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;For example, an interactive session might look like&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;% add b 10 first blog post&lt;/span&gt;
&lt;span class="c"&gt;% add c 10 finished cli&lt;/span&gt;
&lt;span class="c"&gt;% add d 120 debugging decorators&lt;/span&gt;
&lt;span class="c"&gt;% add m 120 always keep the final presentation in mind&lt;/span&gt;
&lt;span class="c"&gt;% add r 60 read articles on pandas&lt;/span&gt;
&lt;span class="c"&gt;% add p 120 learned about decorators&lt;/span&gt;
&lt;/pre&gt;


&lt;/blockquote&gt;
&lt;p&gt;The &lt;code&gt;show&lt;/code&gt; command allows listing of all the &lt;code&gt;Task&lt;/code&gt;-s added till now.&lt;/p&gt;
&lt;blockquote&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;%&lt;/span&gt; &lt;span class="k"&gt;show&lt;/span&gt;
&lt;span class="nv"&gt;b&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="nv"&gt;first&lt;/span&gt; &lt;span class="nv"&gt;blog&lt;/span&gt; &lt;span class="nv"&gt;post&lt;/span&gt;
&lt;span class="nv"&gt;c&lt;/span&gt; &lt;span class="mi"&gt;10&lt;/span&gt; &lt;span class="nv"&gt;finished&lt;/span&gt; &lt;span class="nv"&gt;cli&lt;/span&gt;
&lt;span class="nv"&gt;d&lt;/span&gt; &lt;span class="mi"&gt;120&lt;/span&gt; &lt;span class="nv"&gt;debugging&lt;/span&gt; &lt;span class="nv"&gt;decorators&lt;/span&gt;
&lt;span class="nv"&gt;m&lt;/span&gt; &lt;span class="mi"&gt;120&lt;/span&gt; &lt;span class="nv"&gt;always&lt;/span&gt; &lt;span class="nv"&gt;keep&lt;/span&gt; &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;final&lt;/span&gt; &lt;span class="nv"&gt;presentation&lt;/span&gt; &lt;span class="nv"&gt;in&lt;/span&gt; &lt;span class="nv"&gt;mind&lt;/span&gt;
&lt;span class="nv"&gt;r&lt;/span&gt; &lt;span class="mi"&gt;60&lt;/span&gt; &lt;span class="nv"&gt;read&lt;/span&gt; &lt;span class="nv"&gt;articles&lt;/span&gt; &lt;span class="nv"&gt;on&lt;/span&gt; &lt;span class="nv"&gt;pandas&lt;/span&gt;
&lt;span class="nv"&gt;p&lt;/span&gt; &lt;span class="mi"&gt;120&lt;/span&gt; &lt;span class="nv"&gt;learned&lt;/span&gt; &lt;span class="nv"&gt;about&lt;/span&gt; &lt;span class="nv"&gt;decorators&lt;/span&gt;
&lt;/pre&gt;


&lt;/blockquote&gt;
&lt;p&gt;For this exercise you need to update add helpful messages that will summarize what each
of the options for &lt;code&gt;app.py&lt;/code&gt; stand for.&lt;/p&gt;
&lt;h3&gt;1.11. Exercise 4: Run in interactive mode&lt;/h3&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;i&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Add some tasks and list them out by using the commands shown above. Play around with the up/down
arrow keys to access history of the commands.&lt;/p&gt;
&lt;p&gt;Exit the session using &lt;code&gt;ctrl+D&lt;/code&gt;. From your command prompt, run &lt;code&gt;ls -l&lt;/code&gt; in linux or mac or &lt;code&gt;dir&lt;/code&gt;
in windows. What is the name of the file that gets created?&lt;/p&gt;
&lt;p&gt;Using sqlite3&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;sqlite3&lt;/span&gt; &lt;span class="n"&gt;to_do_list&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;db&lt;/span&gt; &lt;span class="s1"&gt;'select * from ToDo;'&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Compare the output that you get from running &lt;code&gt;show&lt;/code&gt; and using the command above.&lt;/p&gt;
&lt;h3&gt;1.12. Exercise 4: Run in non-interactive mode&lt;/h3&gt;
&lt;p&gt;For ease of entering data the program can also be run in non-interactive mode&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;b&lt;/span&gt; &lt;span class="mi"&gt;30&lt;/span&gt;  &lt;span class="ss"&gt;"first blog post completed"&lt;/span&gt;
&lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;s&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Add a few tasks that have been completed and list them non-interactively.
Note you'll need to put the description in quotes in this mode.&lt;/p&gt;
&lt;h4&gt;1.12.1. Optional: For non-windows users only&lt;/h4&gt;
&lt;p&gt;You can further simplify entering tracking your time by adding a bash shell alias.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;alias&lt;/span&gt; &lt;span class="n"&gt;add&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;&lt;span class="n"&gt;function&lt;/span&gt; &lt;span class="n"&gt;_add&lt;/span&gt;&lt;span class="p"&gt;(){&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="s"&gt;"$@"&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; &lt;span class="p"&gt;};&lt;/span&gt;&lt;span class="n"&gt;_add&lt;/span&gt;&lt;span class="err"&gt;'&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Then from your shell you can&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;$ add c &lt;span class="m"&gt;30&lt;/span&gt; &lt;span class="s2"&gt;"finished oauth"&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Add a similar shell alias for the &lt;code&gt;show&lt;/code&gt; command.&lt;/p&gt;
&lt;h3&gt;1.13. Exercise 5: Error handling&lt;/h3&gt;
&lt;p&gt;Currently we have two commands &lt;code&gt;add&lt;/code&gt; and &lt;code&gt;show&lt;/code&gt;. Lets say the user made a typo,
or was creative while trying to input a command.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;% add c api 30 complete&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;instead of&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;% add c 30 api complete&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;This results in the program crashing horribly with huge stack trace.
Add error handling to handle cases when the program is unable to &lt;code&gt;parse&lt;/code&gt; the input
passed by the user.&lt;/p&gt;
&lt;h3&gt;1.14. Exercise 6: Enhance the show command&lt;/h3&gt;
&lt;p&gt;Enhance the show command to summarize the output by task category.
Your summary should include how much time was spent on each of the task category.&lt;/p&gt;
&lt;p&gt;As seen above, we are using sqlite3. You may choose to do your summary calculation
using sql or write the logic in python.&lt;/p&gt;
&lt;h3&gt;1.15. Exercise 7: Add a field for task complete or not&lt;/h3&gt;
&lt;p&gt;Next take a look at&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="n"&gt;ToDo&lt;/span&gt;(&lt;span class="n"&gt;Model&lt;/span&gt;):
&lt;/pre&gt;


&lt;p&gt;This class has a list of fields - task, description, timestamp, mins, done.
Till now we have not been using this field. It has a default value of &lt;code&gt;True&lt;/code&gt;
to indicate that a completed task is being added.&lt;/p&gt;
&lt;p&gt;However, it might not always be the case. You might want to log your work,
and still have incomplete tasks. In fact, logging often and logging early is
encouraged! In order to faciliate that we need to optionally
take a fourth parameter in the input for adding a new task.&lt;/p&gt;
&lt;p&gt;Take a look at the decorator right above the &lt;code&gt;main&lt;/code&gt; function&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;@click&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="k"&gt;option&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;'--add'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="s1"&gt;'-a'&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;nargs&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;type&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;click&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;STRING&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="nc"&gt;int&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="n"&gt;click&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;STRING&lt;/span&gt;&lt;span class="p"&gt;),&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;span class="w"&gt;            &lt;/span&gt;&lt;span class="k"&gt;default&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="k"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="w"&gt; &lt;/span&gt;&lt;span class="k"&gt;None&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;&lt;span class="w"&gt;&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;This is the starting point for allowing taking in an extra input.
You will find the relevant documentation &lt;a href="http://click.pocoo.org/5/options/"&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Hint: Note the type of the field is boolean.
You will need to modify the &lt;code&gt;parse&lt;/code&gt;, &lt;code&gt;add&lt;/code&gt; and the &lt;code&gt;main&lt;/code&gt; function in order to complete
this exercise.&lt;/p&gt;
&lt;h3&gt;1.16. Exercise 8: Enhance the summary&lt;/h3&gt;
&lt;p&gt;Enhance your summary function to show how many tasks are in progress and how many are complete.
How you want to format the information is completely up to your choice.&lt;/p&gt;
&lt;h3&gt;1.17. Exercise 9: Hashtags&lt;/h3&gt;
&lt;p&gt;Now that you have enabled the flag to indicate if a task is complete or not, you
can log a much fine grained prorgress of your tasks. You can tag your task with
arbitary hashtags in order to provide better semantic information. For example:&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="c"&gt;% add p 120 #data_science learned about precision/recall&lt;/span&gt;
&lt;span class="c"&gt;% add b 120 finished the blogpost&lt;/span&gt;
&lt;span class="c"&gt;% add p 30 #data_science learned about roc curves&lt;/span&gt;
&lt;span class="c"&gt;% add p 30 #webdev added a flask interface&lt;/span&gt;
&lt;span class="c"&gt;% add d 30 #issues/7 found a bug, new github issue&lt;/span&gt;
&lt;span class="c"&gt;% add p 30 #issues/7 closed github issue 7&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Enhance the show command to optionally take a hashtag as parameter, that will filter out only
tasks which have that hashtag. Accrodingly your summary should reflect only
data relevant to that hashtag.&lt;/p&gt;
&lt;h3&gt;1.18. Exercise 10: Add a field for effectiveness&lt;/h3&gt;
&lt;p&gt;Next its time to add a score to your efforts. Add a field to the &lt;code&gt;ToDo&lt;/code&gt; class called effective,
where you can record how effective a task was. An effective score is a number between 1 to 5,
1 being the lowest and 5 being the highest.&lt;/p&gt;
&lt;p&gt;Armed with this data, you should be able to answer
(i) what is taking up most of your time?
(ii) which activities are the most effective for your growth&lt;/p&gt;&lt;/div&gt;</description><guid>https://chicagopython.github.io/posts/trackcoder/</guid><pubDate>Thu, 16 May 2019 04:48:53 GMT</pubDate></item><item><title>Unit Testing and Continuous Integration with Pytest &amp; Travis</title><link>https://chicagopython.github.io/posts/unit-testing-and-continuous-integration-with-pytest-travis/</link><dc:creator>Chicago Python User Group</dc:creator><description>&lt;div&gt;&lt;h2&gt;1. Introduction to PyTest and Continuous Integration&lt;/h2&gt;
&lt;p&gt;Testing and Continuous Integration is at the heart of building good software.
For this project we will be focus on writing tests for a given problem and use
travis-ci for running the tests automatically everytime code is checked into Github.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Objectives&lt;/strong&gt;:
In this project we will explore&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Introduction to unit testing with pytest&lt;/li&gt;
&lt;li&gt;How to setup continuous integration with Github and Travis-CI&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;1.1. Setup Instructions&lt;/h3&gt;
&lt;p&gt;For doing this project you will need a Github account, a Travis-ci.org account and git
installed locally.&lt;/p&gt;
&lt;h4&gt;1.1.1. Git and Github&lt;/h4&gt;
&lt;p&gt;After completing the steps below you should have a github account and be able to push
your local changes to this repository to github.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Follow the setup steps described &lt;a href="https://help.github.com/articles/set-up-git/"&gt;here&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Read the steps described in &lt;a href="https://help.github.com/articles/fork-a-repo"&gt;fork a repo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Use the steps described above to fork this repository &lt;a href="https://github.com/chicagopython/CodingWorkshops"&gt;CodingWorkshops&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The changes that you make as a part of this exercise, will be pushed to the fork you created for this
repository.&lt;/p&gt;
&lt;p&gt;In case you have already have created a fork of this repository in your github account, you will
want to bring it up to date with the recent changes. In that case,
you will need to do the following:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href="https://help.github.com/articles/configuring-a-remote-for-a-fork/"&gt;configuring a remote fork&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href="https://help.github.com/articles/syncing-a-fork/"&gt;syncing a fok&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h4&gt;1.1.2. Travis setup&lt;/h4&gt;
&lt;p&gt;Continuous Integrration is a critical part of building your software. It automatically runs
the tests when you check in code into your version control (git) and paves the way for
continuous delivery, i.e. release often and release early.
In this section we will set up a Continuous Integration pipeline with Travis-ci.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;First, head over to &lt;a href="https://travis-ci.org/."&gt;Travis-CI.org&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Sign in with your Github account, and accept the terms and conditions.&lt;/li&gt;
&lt;li&gt;On success, you will be landing on your profile page that lists the CodingWorkshop repository&lt;/li&gt;
&lt;li&gt;Once you have located the repo, toggle the button next to the repository to enable travis CI&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;img alt="travi-build-img" src="https://chicagopython.github.io/posts/unit-testing-and-continuous-integration-with-pytest-travis/EnableTravisCI.png"&gt;&lt;/p&gt;
&lt;p&gt;If you have multiple repositories, you will have to search for the repository by typing in the name
of the repository (CodingWorkshop) in the search bar on the dashboard page.&lt;/p&gt;
&lt;h3&gt;1.2. Python&lt;/h3&gt;
&lt;p&gt;This project has made no attempt to be compatible with Python 2.7. üòé&lt;/p&gt;
&lt;p&gt;Recommended version: Python 3.6&lt;/p&gt;
&lt;h3&gt;1.3. Quick Git command refresher&lt;/h3&gt;
&lt;p&gt;Below are the few most used git commands&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="nv"&gt;git&lt;/span&gt; &lt;span class="nv"&gt;checkout&lt;/span&gt; &lt;span class="nv"&gt;master&lt;/span&gt;          # &lt;span class="nv"&gt;checkout&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;master&lt;/span&gt; &lt;span class="nv"&gt;branch&lt;/span&gt;
&lt;span class="nv"&gt;git&lt;/span&gt; &lt;span class="nv"&gt;checkout&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;b&lt;/span&gt; &lt;span class="nv"&gt;feature&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;cool&lt;/span&gt; # &lt;span class="nv"&gt;crate&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;new&lt;/span&gt; &lt;span class="nv"&gt;branch&lt;/span&gt; &lt;span class="nv"&gt;feature&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;cool&lt;/span&gt;
&lt;span class="nv"&gt;git&lt;/span&gt; &lt;span class="nv"&gt;add&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;u&lt;/span&gt;                   # &lt;span class="nv"&gt;stage&lt;/span&gt; &lt;span class="nv"&gt;all&lt;/span&gt; &lt;span class="nv"&gt;the&lt;/span&gt; &lt;span class="nv"&gt;updates&lt;/span&gt; &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="nv"&gt;commit&lt;/span&gt;
&lt;span class="nv"&gt;git&lt;/span&gt; &lt;span class="nv"&gt;commit&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="nv"&gt;am&lt;/span&gt; &lt;span class="s2"&gt;"&lt;/span&gt;&lt;span class="s"&gt;Adding changes and commiting with a comment&lt;/span&gt;&lt;span class="s2"&gt;"&lt;/span&gt;
&lt;span class="nv"&gt;git&lt;/span&gt; &lt;span class="nv"&gt;push&lt;/span&gt; &lt;span class="nv"&gt;origin&lt;/span&gt; &lt;span class="nv"&gt;master&lt;/span&gt;       # &lt;span class="nv"&gt;push&lt;/span&gt; &lt;span class="nv"&gt;commits&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;develop&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="nv"&gt;ci&lt;/span&gt; &lt;span class="nv"&gt;branch&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Note for this exercise, we will be working on the master branch directly. However,
that is NOT the best practice. Branches are cheap in git, so a new feature or fix
would first go to a branch, get tested, code reviewed and finally merged to master.&lt;/p&gt;
&lt;h3&gt;1.4. Exercise 0: Project Setup&lt;/h3&gt;
&lt;p&gt;After completing the steps in setup, you should have the cloned versoin of the fork of CodingWorkshop
repository in your local machine. Lets take the time to look at the structure of this
project. All code is located under &lt;code&gt;/problems/py101/testing&lt;/code&gt; directory. So from your
terminal go to the directory where you have cloned the repository.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;clone&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;problems&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;py101&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;testing&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Make sure you are in this directory for the remainder of this project.&lt;/p&gt;
&lt;p&gt;Run &lt;code&gt;pwd&lt;/code&gt; (&lt;code&gt;cwd&lt;/code&gt; for Windows) on the command prompt to find out which directory you
are on.&lt;/p&gt;
&lt;p&gt;Your output should end in &lt;code&gt;problems/py101/testing&lt;/code&gt; and contain the files described
below.&lt;/p&gt;
&lt;h4&gt;1.4.1. &lt;code&gt;team_organizer.py&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;This file is a simplified implementation of the problem of grouping the project
night attendees into teams of four based on the number of lines of code they have
written such that in each team, two team members have more lines of code than the other.
This is the system under test.&lt;/p&gt;
&lt;h4&gt;1.4.2. &lt;code&gt;test_team_organizer.py&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;This file is the test for the above module written using Pytest.&lt;/p&gt;
&lt;p&gt;These two files mentioned above are the only two files that we will be making
modifications to for this project.&lt;/p&gt;
&lt;h4&gt;1.4.3. &lt;code&gt;Makefile&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;This file contains the commands that are required building the project.
You can run &lt;code&gt;make help&lt;/code&gt; to see what are the options.&lt;/p&gt;
&lt;h4&gt;1.4.4. &lt;code&gt;Pipfile&lt;/code&gt; and &lt;code&gt;Pipfile.lock&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;These two files are used by &lt;code&gt;pipenv&lt;/code&gt; to create a virtual enviornment that
isolates all the dependencies of this project from other python projects in your computer.
Learn more about &lt;a href="https://docs.pipenv.org/"&gt;pipenv&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;1.4.5. &lt;code&gt;pytest.ini&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;This file contains the configuration for &lt;code&gt;pytest&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;1.4.6. &lt;code&gt;travis.yml&lt;/code&gt;&lt;/h4&gt;
&lt;p&gt;In addition to all the files in this directory, located at the root of the repository,
is a file called &lt;code&gt;.travis.yml&lt;/code&gt;. This is used by the continuous intergration tool travis-ci.
This contains the information on how to build this python project.&lt;/p&gt;
&lt;h4&gt;1.4.7. Test your setup is working&lt;/h4&gt;
&lt;p&gt;Just make a small edit on this file (README.md), commit and push the changes.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="k"&gt;commit&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;am&lt;/span&gt; &lt;span class="ss"&gt;"Demo commit to check everything is working"&lt;/span&gt;
&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;push&lt;/span&gt; &lt;span class="n"&gt;origin&lt;/span&gt; &lt;span class="n"&gt;master&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;If travis-ci.org gets triggered and is all green, your push has successfully ran through
the linting and testing pipeline.&lt;/p&gt;
&lt;p&gt;To display that badge of honor, click on the build button next on the travis page and select
Markdown from the second dropdown. Copy the markdown code displayed and add it to the top
of this file (README.md).&lt;/p&gt;
&lt;p&gt;&lt;img alt="travi-build-img" src="https://chicagopython.github.io/posts/unit-testing-and-continuous-integration-with-pytest-travis/travis-build-img.png"&gt;&lt;/p&gt;
&lt;p&gt;If you run into issues, &lt;a href="https://chipy.slack.com/messages/C093F7W8P/details/"&gt;ask your question on slack&lt;/a&gt;&lt;/p&gt;
&lt;h3&gt;1.5. Exercise 1: Build&lt;/h3&gt;
&lt;p&gt;From the &lt;code&gt;/problems/py101/testing&lt;/code&gt; directory, run&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;make&lt;/span&gt;
&lt;/pre&gt;


&lt;ul&gt;
&lt;li&gt;Which packages got installed?&lt;/li&gt;
&lt;li&gt;Which version of python is getting used?&lt;/li&gt;
&lt;li&gt;How many tests pass, skipped and how long did it take?&lt;/li&gt;
&lt;li&gt;Note a new directory &lt;code&gt;htmlcov&lt;/code&gt; was created. We will revisit this in Exericse 5.&lt;/li&gt;
&lt;li&gt;What is difference in output when you run the &lt;code&gt;make&lt;/code&gt; command again?&lt;/li&gt;
&lt;/ul&gt;
&lt;h3&gt;1.6. Exercise 2: Run the program&lt;/h3&gt;
&lt;p&gt;Start by running&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;team_organizer&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;This will drop you to the program's interactive prompt.
Below is a sample interaction where users named a, b, c,
d, e and f are added using the add command.
Following that, we run the &lt;code&gt;print&lt;/code&gt; command where the users
are grouped in to max of size four where two users have
written less lines of code than the others.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;```
&lt;span class="nv"&gt;t&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;master&lt;/span&gt; &lt;span class="o"&gt;*&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt; &lt;span class="nv"&gt;testing&lt;/span&gt; $ &lt;span class="nv"&gt;python&lt;/span&gt; &lt;span class="nv"&gt;team_organizer&lt;/span&gt;.&lt;span class="nv"&gt;py&lt;/span&gt;
&lt;span class="nv"&gt;Welcome&lt;/span&gt; &lt;span class="nv"&gt;to&lt;/span&gt; &lt;span class="nv"&gt;Chicago&lt;/span&gt; &lt;span class="nv"&gt;Python&lt;/span&gt; &lt;span class="nv"&gt;Project&lt;/span&gt; &lt;span class="nv"&gt;Night&lt;/span&gt; &lt;span class="nv"&gt;Team&lt;/span&gt; &lt;span class="nv"&gt;Organizer&lt;/span&gt;
&lt;span class="nv"&gt;org&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;help&lt;/span&gt;
&lt;span class="nv"&gt;help&lt;/span&gt;

&lt;span class="nv"&gt;Documented&lt;/span&gt; &lt;span class="nv"&gt;commands&lt;/span&gt; &lt;span class="ss"&gt;(&lt;/span&gt;&lt;span class="nv"&gt;type&lt;/span&gt; &lt;span class="nv"&gt;help&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nv"&gt;topic&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;&lt;span class="ss"&gt;)&lt;/span&gt;:
&lt;span class="o"&gt;========================================&lt;/span&gt;
&lt;span class="nv"&gt;add&lt;/span&gt;  &lt;span class="nv"&gt;help&lt;/span&gt;  &lt;span class="nv"&gt;print&lt;/span&gt;

&lt;span class="nv"&gt;Undocumented&lt;/span&gt; &lt;span class="nv"&gt;commands&lt;/span&gt;:
&lt;span class="o"&gt;======================&lt;/span&gt;
&lt;span class="k"&gt;exit&lt;/span&gt;

&lt;span class="nv"&gt;org&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;help&lt;/span&gt; &lt;span class="nv"&gt;add&lt;/span&gt;
&lt;span class="nv"&gt;help&lt;/span&gt; &lt;span class="nv"&gt;add&lt;/span&gt;
&lt;span class="nv"&gt;Adds&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="nv"&gt;new&lt;/span&gt; &lt;span class="nv"&gt;user&lt;/span&gt;. &lt;span class="nv"&gt;Needs&lt;/span&gt; &lt;span class="nv"&gt;Name&lt;/span&gt; &lt;span class="nv"&gt;slackhandle&lt;/span&gt; &lt;span class="nv"&gt;number_of_lines&lt;/span&gt; &lt;span class="nv"&gt;separated&lt;/span&gt; &lt;span class="nv"&gt;by&lt;/span&gt; &lt;span class="nv"&gt;space&lt;/span&gt;
&lt;span class="nv"&gt;org&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;add&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt; @&lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
&lt;span class="nv"&gt;add&lt;/span&gt; &lt;span class="nv"&gt;a&lt;/span&gt; @&lt;span class="nv"&gt;a&lt;/span&gt; &lt;span class="mi"&gt;100&lt;/span&gt;
&lt;span class="nv"&gt;org&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;add&lt;/span&gt; &lt;span class="nv"&gt;b&lt;/span&gt; @&lt;span class="nv"&gt;b&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;
&lt;span class="nv"&gt;add&lt;/span&gt; &lt;span class="nv"&gt;b&lt;/span&gt; @&lt;span class="nv"&gt;b&lt;/span&gt; &lt;span class="mi"&gt;200&lt;/span&gt;
&lt;span class="nv"&gt;org&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;add&lt;/span&gt; &lt;span class="nv"&gt;c&lt;/span&gt; @&lt;span class="nv"&gt;c&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt;
&lt;span class="nv"&gt;add&lt;/span&gt; &lt;span class="nv"&gt;c&lt;/span&gt; @&lt;span class="nv"&gt;c&lt;/span&gt; &lt;span class="mi"&gt;300&lt;/span&gt;
&lt;span class="nv"&gt;org&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;add&lt;/span&gt; &lt;span class="nv"&gt;d&lt;/span&gt; @&lt;span class="nv"&gt;d&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt;
&lt;span class="nv"&gt;add&lt;/span&gt; &lt;span class="nv"&gt;d&lt;/span&gt; @&lt;span class="nv"&gt;d&lt;/span&gt; &lt;span class="mi"&gt;400&lt;/span&gt;
&lt;span class="nv"&gt;org&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;add&lt;/span&gt; &lt;span class="nv"&gt;e&lt;/span&gt; @&lt;span class="nv"&gt;e&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;
&lt;span class="nv"&gt;add&lt;/span&gt; &lt;span class="nv"&gt;e&lt;/span&gt; @&lt;span class="nv"&gt;e&lt;/span&gt; &lt;span class="mi"&gt;500&lt;/span&gt;
&lt;span class="nv"&gt;org&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;add&lt;/span&gt; &lt;span class="nv"&gt;f&lt;/span&gt; @&lt;span class="nv"&gt;f&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;
&lt;span class="nv"&gt;add&lt;/span&gt; &lt;span class="nv"&gt;f&lt;/span&gt; @&lt;span class="nv"&gt;f&lt;/span&gt; &lt;span class="mi"&gt;50&lt;/span&gt;
&lt;span class="nv"&gt;org&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="nv"&gt;print&lt;/span&gt;
&lt;span class="nv"&gt;print&lt;/span&gt;
[&lt;span class="s1"&gt;'&lt;/span&gt;&lt;span class="s"&gt;f, a, e, d&lt;/span&gt;&lt;span class="s1"&gt;'&lt;/span&gt;]
&lt;span class="nv"&gt;b&lt;/span&gt;, &lt;span class="nv"&gt;c&lt;/span&gt;
&lt;span class="nv"&gt;org&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
```
&lt;/pre&gt;


&lt;h3&gt;1.7. Exercise 3: Running the tests&lt;/h3&gt;
&lt;p&gt;Run&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;make&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;This will run the tests in the &lt;code&gt;test_team_organizer.py&lt;/code&gt; file.&lt;/p&gt;
&lt;p&gt;Run&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;pipenv&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt; &lt;span class="n"&gt;pytest&lt;/span&gt; &lt;span class="c1"&gt;--help&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Now check the flags that are present in the &lt;code&gt;pytest.ini&lt;/code&gt; file against
the output of the &lt;code&gt;--help&lt;/code&gt; command to see what each one does.&lt;/p&gt;
&lt;h3&gt;1.8. Execrise 4: Coverage&lt;/h3&gt;
&lt;p&gt;When we first ran &lt;code&gt;make&lt;/code&gt;, &lt;code&gt;pytest&lt;/code&gt; created a directory called &lt;code&gt;htmlcov&lt;/code&gt;
that show you the coverage information about &lt;code&gt;team_organizr,py&lt;/code&gt; code.
Open the &lt;code&gt;index.html&lt;/code&gt; file inside &lt;code&gt;htmlcov&lt;/code&gt; to check the lines that
has not been covered by the tests in the &lt;code&gt;test_team_organizer.py&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;What is the % coverage of the code at this point?
Click on &lt;code&gt;team_organizer.py&lt;/code&gt; to see which lines are outside coverage.&lt;/p&gt;
&lt;h3&gt;1.9. Exercise 6: Fail, Fix, Pass&lt;/h3&gt;
&lt;p&gt;You are now all set to fix the tests. Goto &lt;code&gt;test_team_organizer.py&lt;/code&gt; and
find &lt;code&gt;test_add_a_person_with_lower_than_median&lt;/code&gt; test. Notice this test is
skipped when run with pytest. To fix it remove the decorator &lt;code&gt;pytest.mark.skip&lt;/code&gt;
and run &lt;code&gt;pytest&lt;/code&gt; again. Commit the code and run&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;make&lt;/span&gt; &lt;span class="n"&gt;test&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Make the necessary changes so that the test passes.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="k"&gt;commit&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;am&lt;/span&gt; &lt;span class="ss"&gt;"Fixed failing test"&lt;/span&gt;
&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;push&lt;/span&gt; &lt;span class="n"&gt;origin&lt;/span&gt; &lt;span class="n"&gt;master&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Go to travis-ci.org and inspect the output before and after fixing the test.
What is the coverage value at this point?&lt;/p&gt;
&lt;h3&gt;1.10. Exercise 7: Fixtures&lt;/h3&gt;
&lt;p&gt;The purpose of test fixtures is to provide a fixed baseline upon which tests can
reliably and repeatedly execute.&lt;/p&gt;
&lt;p&gt;We are making use of two fixtures - one factory method &lt;code&gt;person&lt;/code&gt; that churns out Persons
as needed by &lt;code&gt;organizer&lt;/code&gt; fixture.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;test_count_number_of_teams&lt;/code&gt; is broken as well. How can you fix it?&lt;/p&gt;
&lt;p&gt;Tip: To run a singe test, use&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;pipenv&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt; &lt;span class="n"&gt;pytest&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;k&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="k"&gt;of&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;test&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;


&lt;h3&gt;1.11. Exercise 8: Implement the tests&lt;/h3&gt;
&lt;p&gt;The two functions below have been left for you to implement.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;test_add_a_person_who_has_never_written_code_before&lt;/li&gt;
&lt;li&gt;test_add_two_person_with_same_name_but_different_slack_handles&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Note the names of the tests are long and verbose to give you an idea of what
what exactly you need to test.&lt;/p&gt;
&lt;p&gt;Does implementing these tests have any effect on coverage results?
Would it be still useful if there is no improvement in coverage?&lt;/p&gt;
&lt;h3&gt;1.12. Exercise 9: Implement the tests first, then implement the feature&lt;/h3&gt;
&lt;p&gt;For the following two tests, first implement the test that asserts the
expected behavior. From the test name it should be evident from the test name.
If you run the tests at this point, they should fail. Then go back to
&lt;code&gt;team_organizer.py&lt;/code&gt; and implement the feature by changing the code.
Once your implementation is complete, run &lt;code&gt;make test&lt;/code&gt;.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;test_adding_person_with_negative_lines_of_code_throws_exception&lt;/li&gt;
&lt;li&gt;test_handle_duplicate_additions&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</description><category>ci/cd</category><category>pytest</category><category>testing</category><guid>https://chicagopython.github.io/posts/unit-testing-and-continuous-integration-with-pytest-travis/</guid><pubDate>Sun, 17 Mar 2019 06:08:40 GMT</pubDate></item><item><title>Command line App for Grouping Project Night Challengers</title><link>https://chicagopython.github.io/posts/command-line-app-for-grouping-project-night-challengers/</link><dc:creator>Chicago Python User Group</dc:creator><description>&lt;div&gt;&lt;h2&gt;Command line App for Grouping Project Night Challengers&lt;/h2&gt;
&lt;p&gt;The organizers of Project Nights need your help! Grouping people for
team projects is a manual task. Why do it manually, when
we can automate it?&lt;/p&gt;
&lt;h3&gt;Is this project for you&lt;/h3&gt;
&lt;p&gt;Before you progress further, let's check if we are ready to solve this. You should&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Have a personal computer with working wifi and power chord&lt;/li&gt;
&lt;li&gt;Have Python 3 installed on your computer. Yep, Python 3 only.&lt;/li&gt;
&lt;li&gt;Have &lt;a href="https://atom.io/"&gt;Atom&lt;/a&gt; or &lt;a href="https://www.sublimetext.com/3"&gt;Sublime Text&lt;/a&gt; installed in your computer.&lt;/li&gt;
&lt;li&gt;Have written &amp;amp; ran programs in Python from the command line&lt;/li&gt;
&lt;li&gt;Have some idea about lists, dictionaries and functions&lt;/li&gt;
&lt;li&gt;Have some idea about &lt;code&gt;virtualenv&lt;/code&gt; and installing packages with &lt;code&gt;pip&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;This project is not tested using Jupyter Notebook, PyCharm,
Spider, or any other ide/text editor/programming environment for that matter.
Atom or Sublime Text and the command line are the only supported development environment for this project.&lt;/p&gt;
&lt;p&gt;Short url for this page: &lt;strong&gt;https://git.io/vdv43&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;Sounds reasonable? Then let's dive in - and build an awesome command line app using python.&lt;/p&gt;
&lt;h3&gt;Can command line applications be cool&lt;/h3&gt;
&lt;p&gt;You bet!
Checkout this PyCon 2017 video on which this project is based&lt;/p&gt;
&lt;p&gt;&lt;a href="http://www.youtube.com/watch?feature=player_embedded&amp;amp;v=hJhZhLg3obk" target="_blank"&gt;&lt;img src="http://img.youtube.com/vi/hJhZhLg3obk/0.jpg" alt="Amjith Ramanujam Awesome Command Line Tools PyCon 2017" width="560" height="315" border="10"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;The slides are available &lt;a href="https://speakerdeck.com/pycon2017/amjith-ramanujam-awesome-command-line-tools"&gt;here&lt;/a&gt;.&lt;/p&gt;
&lt;h4&gt;What is a Team Project&lt;/h4&gt;
&lt;p&gt;Glad you asked! A team project is an hour long problem solving session where each team
consists of four members of different expertise level. The teams are formed from the
list of attendees of the project night.&lt;/p&gt;
&lt;h4&gt;The Objective&lt;/h4&gt;
&lt;p&gt;Our objective is to build an awesome command line application in Python3 that
- allows creating list of people who want to participate in a team project
- once the list is created, the program automatically creates teams of four&lt;/p&gt;
&lt;h4&gt;A Balanced Team&lt;/h4&gt;
&lt;p&gt;To keep the team composition balanced in terms of experience, we want every team
to have two members with more experience than the other two.
Measuring experience is very subjective and difficult, but we will keep it simple.
We will rely on a (not very scientific) metic - lines of code written till date.&lt;/p&gt;
&lt;p&gt;We will create a list by taking names of people from tonight's RSVP list. Along with their name we will also include the number of lines of code that person has written till date in Python or an equivalent language. Imagine this as a tool that one of the organizers uses to checkin attendees as they start coming in on the day of Project Night.&lt;/p&gt;
&lt;p&gt;And yeah, this number of lines can be just a rough estimate. As a
reference, the linux kernel is over 23 million lines of code!&lt;/p&gt;
&lt;h4&gt;Bootstrap&lt;/h4&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;If you are familiar with &lt;code&gt;git&lt;/code&gt;, run&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt; &lt;span class="n"&gt;clone&lt;/span&gt; &lt;span class="n"&gt;https&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="o"&gt;//&lt;/span&gt;&lt;span class="n"&gt;github&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;com&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;chicagopython&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;CodingWorkshops&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;git&lt;/span&gt;
&lt;/pre&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;If not, go to https://github.com/chicagopython/CodingWorkshops&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Click on the Download Zip and unzip the file that gets downloaded&lt;/li&gt;
&lt;li&gt;From your command line, change directory to the path where you have downloaded it.&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;On linux or OS X&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;CodingWorkshops&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;problems&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;py101&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;python_team_project&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;
&lt;/pre&gt;


&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;On Windows&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;cd&lt;/span&gt; &lt;span class="n"&gt;path&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="k"&gt;to&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;CodingWorkshops&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;problems&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;py101&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;python_team_project&lt;/span&gt;
&lt;/pre&gt;


&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Here you will find the basic skeleton of the app under &lt;code&gt;app.py&lt;/code&gt;. (after September 21, 2017)&lt;/p&gt;
&lt;h4&gt;Set up virtualenv&lt;/h4&gt;
&lt;p&gt;If you are using Linux or OS X, run the following to create a new virtualenv&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;python3&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;venv&lt;/span&gt; &lt;span class="n"&gt;venv&lt;/span&gt;
&lt;span class="k"&gt;source&lt;/span&gt; &lt;span class="n"&gt;venv&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;bin&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;activate&lt;/span&gt;
&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="n"&gt;requirements&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;
&lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;On Windows, run the following&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;python3&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;m&lt;/span&gt; &lt;span class="n"&gt;venv&lt;/span&gt; &lt;span class="n"&gt;venv&lt;/span&gt;
&lt;span class="n"&gt;venv&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;Scripts&lt;/span&gt;&lt;span class="err"&gt;\&lt;/span&gt;&lt;span class="n"&gt;activate&lt;/span&gt;
&lt;span class="n"&gt;pip&lt;/span&gt; &lt;span class="n"&gt;install&lt;/span&gt; &lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;r&lt;/span&gt; &lt;span class="n"&gt;requirements&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;txt&lt;/span&gt;
&lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;&lt;a href="https://asciinema.org/a/M1hP91h153PuOPEjVYbot6jPj"&gt;&lt;img alt="asciicast" src="https://asciinema.org/a/M1hP91h153PuOPEjVYbot6jPj.png"&gt;&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Next let's get started by looking into the code.&lt;/p&gt;
&lt;h3&gt;Feature 0: Look into app.py&lt;/h3&gt;
&lt;p&gt;app.py is the script contains some code to get you started.
We will be using two external libraries for this
program.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="n"&gt;python_prompt_toolkit&lt;/span&gt;
&lt;span class="n"&gt;meetup&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;api&lt;/span&gt;
&lt;/pre&gt;


&lt;ul&gt;
&lt;li&gt;&lt;code&gt;prompt_toolkit&lt;/code&gt; makes it easy for building awesome command line apps&lt;/li&gt;
&lt;li&gt;&lt;code&gt;meetup-api&lt;/code&gt; provides us with the data for the meetup&lt;/li&gt;
&lt;li&gt;&lt;code&gt;asciinema&lt;/code&gt; which is also in the &lt;code&gt;requirements.txt&lt;/code&gt; isn't strictly necessary and we'll talk about it last&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;code&gt;execute&lt;/code&gt; function is where you would be writing your application logic.&lt;/p&gt;
&lt;p&gt;You should not require to make changes to &lt;code&gt;main&lt;/code&gt; and &lt;code&gt;get_names&lt;/code&gt; functions. In an upcoming project nights we will dig into &lt;code&gt;get_names&lt;/code&gt; and make changes to it.&lt;/p&gt;
&lt;p&gt;Next let's run app.py&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;   &lt;span class="n"&gt;python3&lt;/span&gt; &lt;span class="n"&gt;app&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;py&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;This should drop you to a prompt.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Type in something to that prompt.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Hola&lt;/span&gt; &lt;span class="n"&gt;amigo&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;You&lt;/span&gt; &lt;span class="n"&gt;issued&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Hola&lt;/span&gt; &lt;span class="n"&gt;amigo&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Try a few more&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;Gracias&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;You&lt;/span&gt; &lt;span class="n"&gt;issued&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;&lt;span class="n"&gt;Gracias&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;You can now press the up arrow key and access the history of the commands you have issued. To exit out of the program, you can type Ctrl-D.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;GoodBye!&lt;/p&gt;
&lt;h4&gt;Feature 1: Implement the Add command&lt;/h4&gt;
&lt;p&gt;Next let's create a command where the user of the program can register new participants to build up the list of users from whom teams will be formed.&lt;/p&gt;
&lt;p&gt;The command should look like the following&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="k"&gt;add&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="n"&gt;name&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="nb"&gt;number&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="n"&gt;lines&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;where &lt;name&gt; is the full name of the person as it appears in the
meetup.com and &lt;lines&gt; is the  number of lines of code
that person has written in Python or a similar programming language in their life.&lt;/lines&gt;&lt;/name&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;add Tathagata Dasgupta 1&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h4&gt;Feature 2: Add some error checking (optional)&lt;/h4&gt;
&lt;p&gt;You might be asking what if the user incorrectly types something that is not a number
for the &lt;code&gt;number of lines&lt;/code&gt;. Indeed that would be incorrect. Show an error message
if &lt;number of lines&gt; is not a number.&lt;/number&gt;&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;add&lt;/span&gt; &lt;span class="n"&gt;Tathagata&lt;/span&gt; &lt;span class="n"&gt;Dasgupta&lt;/span&gt; &lt;span class="n"&gt;o&lt;/span&gt;
    &lt;span class="n"&gt;ERROR&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="nb"&gt;number&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="n"&gt;lines&lt;/span&gt; &lt;span class="n"&gt;should&lt;/span&gt; &lt;span class="n"&gt;be&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;er&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="ss"&gt;"number"&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Are there other error conditions that can arise?&lt;/p&gt;
&lt;h3&gt;Feature 2: Implement a List command&lt;/h3&gt;
&lt;p&gt;Next add a new command list.
Show the number of people added and prints the total count
and the median of the line count.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;add&lt;/span&gt; &lt;span class="n"&gt;Tathagata&lt;/span&gt; &lt;span class="n"&gt;Dasgupta&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;add&lt;/span&gt; &lt;span class="n"&gt;Jason&lt;/span&gt; &lt;span class="n"&gt;Wirth&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;add&lt;/span&gt; &lt;span class="n"&gt;Adam&lt;/span&gt; &lt;span class="n"&gt;Bain&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
    &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;add&lt;/span&gt; &lt;span class="n"&gt;Brian&lt;/span&gt; &lt;span class="n"&gt;Ray&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
    &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="k"&gt;add&lt;/span&gt; &lt;span class="n"&gt;Guido&lt;/span&gt; &lt;span class="n"&gt;van&lt;/span&gt; &lt;span class="n"&gt;Rossum&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
    &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;list&lt;/span&gt;
    &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;People&lt;/span&gt; &lt;span class="n"&gt;added&lt;/span&gt; &lt;span class="n"&gt;so&lt;/span&gt; &lt;span class="n"&gt;far&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;Tathagata&lt;/span&gt; &lt;span class="n"&gt;Dasgupta&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;
    &lt;span class="n"&gt;Jason&lt;/span&gt; &lt;span class="n"&gt;Wirth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;
    &lt;span class="n"&gt;Adam&lt;/span&gt; &lt;span class="n"&gt;Bain&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
    &lt;span class="n"&gt;Brian&lt;/span&gt; &lt;span class="n"&gt;Ray&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;4&lt;/span&gt;
    &lt;span class="n"&gt;Guido&lt;/span&gt; &lt;span class="n"&gt;Van&lt;/span&gt; &lt;span class="n"&gt;Rossum&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;

    &lt;span class="nb"&gt;Number&lt;/span&gt; &lt;span class="k"&gt;of&lt;/span&gt; &lt;span class="n"&gt;people&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;5&lt;/span&gt;
    &lt;span class="n"&gt;Median&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="k"&gt;count&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="mi"&gt;3&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Your output need not be exactly the same, but should show the
correct data. The Median line count will be used in the next
features.
Hint: Python3 has the statistics module, so you can use&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;statistics&lt;/span&gt;
&lt;span class="n"&gt;statistics&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;median&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;3&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;4&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt;&lt;span class="mi"&gt;5&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;


&lt;h3&gt;Feature 3: Add the teams command (optional)&lt;/h3&gt;
&lt;p&gt;The next command we will implement is &lt;code&gt;teams&lt;/code&gt; command. Let's say you
have added a few people already and know what the median line count
is for the people you have added so far. On issuing the &lt;code&gt;teams&lt;/code&gt; command
it should output teams of four such that each team contains
  - 2 person who have written less than the median lines of code
  - 2 person who has written more than written more than median&lt;/p&gt;
&lt;p&gt;If there are less the four people left to group, then group them
together.&lt;/p&gt;
&lt;p&gt;With our running example, there would be a team of four, and the
remaining 1 should be in another group.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="o"&gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;teams&lt;/span&gt;
    &lt;span class="k"&gt;Group&lt;/span&gt; &lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Tathagata&lt;/span&gt; &lt;span class="n"&gt;Dasgupta&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Jason&lt;/span&gt; &lt;span class="n"&gt;Wirth&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Brian&lt;/span&gt; &lt;span class="n"&gt;Ray&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;Guido&lt;/span&gt; &lt;span class="n"&gt;Van&lt;/span&gt; &lt;span class="n"&gt;Rossum&lt;/span&gt;
    &lt;span class="k"&gt;Group&lt;/span&gt; &lt;span class="mi"&gt;2&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="n"&gt;Adam&lt;/span&gt; &lt;span class="n"&gt;Bain&lt;/span&gt;
&lt;/pre&gt;


&lt;h3&gt;Feature 4. Enhance Team command (optional)&lt;/h3&gt;
&lt;p&gt;Add a unique team name&lt;/p&gt;
&lt;h3&gt;Feature 5. Enhance Team command (optional)&lt;/h3&gt;
&lt;p&gt;Make up random room names and add a room name for each team.&lt;/p&gt;
&lt;h3&gt;Feature 6. Enhance Teams command (optional)&lt;/h3&gt;
&lt;p&gt;Print the teams sorted with the average number of lines of code for each team.&lt;/p&gt;
&lt;h3&gt;Feature 7. Auto-completion for commands (optional)&lt;/h3&gt;
&lt;p&gt;Adding auto completion is easy with &lt;code&gt;prompt_toolkit&lt;/code&gt;. In &lt;code&gt;app.py&lt;/code&gt; the following line is used to include the
&lt;code&gt;add&lt;/code&gt; command to auto-completion.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;command_completer&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;WordCompleter&lt;/span&gt;&lt;span class="p"&gt;([&lt;/span&gt;&lt;span class="s1"&gt;'add'&lt;/span&gt;&lt;span class="p"&gt;],&lt;/span&gt; &lt;span class="n"&gt;ignore_case&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="k"&gt;True&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Add the remaining commands.&lt;/p&gt;
&lt;h3&gt;Feature 8. Auto-completion for participant names (optional)&lt;/h3&gt;
&lt;p&gt;Typing in names of the attendees of project night would be time consuming
and error prone. Let's add auto-completion magic to it!&lt;/p&gt;
&lt;p&gt;The funcion &lt;code&gt;get_names&lt;/code&gt; uses meetup-api and returns a list of names for the attendees.
All you need to do is include a call to &lt;code&gt;get_names&lt;/code&gt; in the command_completer.&lt;/p&gt;
&lt;h3&gt;Feature 9. Tell the world (optional, OS X or Linux only)&lt;/h3&gt;
&lt;p&gt;We have also installed asciinema - a tool that allows you
to create recordings of your terminal sessions. In order to tell
the world what your team has made, let's make a small recording.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt; &lt;span class="n"&gt;ascriinmea&lt;/span&gt; &lt;span class="n"&gt;rec&lt;/span&gt; &lt;span class="n"&gt;teamname&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Run your program and show off all the cool features you have built in your app.
To finish recording hit Ctrl-D.
Next play the recordings&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt; &lt;span class="n"&gt;asciinema&lt;/span&gt; &lt;span class="n"&gt;play&lt;/span&gt; &lt;span class="n"&gt;teamname&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Once the playback looks good, upload it to the interwebs.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt; &lt;span class="n"&gt;asciinema&lt;/span&gt; &lt;span class="n"&gt;upload&lt;/span&gt; &lt;span class="n"&gt;teamname&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;json&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Finally, tweet the link to @chicagopython with "Python Project Night
Mentorship". Include the twitter handles of your team members.&lt;/p&gt;
&lt;p&gt;Note: This is tested only in OS X. Let me know your experience for running it on
other operating systems.
If you see an error&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;asciinema&lt;/span&gt; &lt;span class="n"&gt;needs&lt;/span&gt; &lt;span class="n"&gt;a&lt;/span&gt; &lt;span class="n"&gt;UTF&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt; &lt;span class="n"&gt;native&lt;/span&gt; &lt;span class="n"&gt;locale&lt;/span&gt; &lt;span class="k"&gt;to&lt;/span&gt; &lt;span class="n"&gt;run&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt; &lt;span class="k"&gt;Check&lt;/span&gt; &lt;span class="n"&gt;the&lt;/span&gt; &lt;span class="n"&gt;output&lt;/span&gt; &lt;span class="n"&gt;of&lt;/span&gt; &lt;span class="ss"&gt;`locale`&lt;/span&gt; &lt;span class="n"&gt;command&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;the run the following command before running asciinema.&lt;/p&gt;
&lt;pre class="code literal-block"&gt;&lt;span&gt;&lt;/span&gt;    &lt;span class="n"&gt;export&lt;/span&gt; &lt;span class="n"&gt;LC_ALL&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="n"&gt;en_US&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="n"&gt;UTF&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="mi"&gt;8&lt;/span&gt;
&lt;/pre&gt;


&lt;p&gt;Thanks! Thats all folks!
If you found a bug or think you some instructions are missing - just open a issue in this repository.&lt;/p&gt;&lt;/div&gt;</description><category>cli</category><category>python-101</category><guid>https://chicagopython.github.io/posts/command-line-app-for-grouping-project-night-challengers/</guid><pubDate>Sun, 17 Mar 2019 04:59:16 GMT</pubDate></item><item><title>Python Koans</title><link>https://chicagopython.github.io/posts/python-koans/</link><dc:creator>Chicago Python User Group</dc:creator><description>&lt;div&gt;&lt;p&gt;For this exercise we will learn the Zen of Python using Test Driven Development.
Python Koans is a suite of broken tests, which are written against Python code that demonstrate how to Pythonic code.
Your job is to fix the broken tests by filling in the missing parts of the code.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Download the zip of python_koans from &lt;a href="https://github.com/tathagata/python_koans/archive/chipy_mentorship_coding_dojo.zip"&gt;here&lt;/a&gt;. This is a fork of the original repository without some of the simpler examples.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Unzip the archive. Change into the directory created and then depending on which version of Python you
would be using, change into python2 or python3 directory.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run &lt;code&gt;./run.sh&lt;/code&gt; or &lt;code&gt;./run.bat&lt;/code&gt; depending on if you are in a unix or windows environment.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;You'll see an output like&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;blockquote&gt;
&lt;p&gt;Thinking AboutLists
  test_creating_lists has damaged your karma.&lt;/p&gt;
&lt;p&gt;You have not yet reached enlightenment ...
  AssertionError: '-=&amp;gt; FILL ME IN! &amp;lt;=-' != 0&lt;/p&gt;
&lt;p&gt;Please meditate on the following code:
 File "/Users/t/Downloads/python_koans-chipy_mentorship_coding_dojo_2/python3/koans/about_lists.py", line 14, in test_creating_lists
    self.assertEqual(__, len(empty_list))&lt;/p&gt;
&lt;p&gt;You have completed 0 koans and 1 lessons.
You are now 206 koans and 36 lessons away from reaching enlightenment.&lt;/p&gt;
&lt;p&gt;Beautiful is better than ugly.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;Open the file that follows "Please meditate on the following code" in your text editor and put the appropriate fix.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;Run &lt;code&gt;./run.sh&lt;/code&gt; or &lt;code&gt;./run.bat&lt;/code&gt; depending on if you are in a unix or windows environment. If your fix is correct, you'll see the error message has been replaced with a new one. Great! you have fixed one test, so now move on to the next one by repeating the above steps.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;&lt;/div&gt;</description><category>testing</category><guid>https://chicagopython.github.io/posts/python-koans/</guid><pubDate>Sat, 22 Jul 2017 11:00:00 GMT</pubDate></item></channel></rss>